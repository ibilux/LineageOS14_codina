Subject: [PATCH 05/21] Settings: Expose storage icon colors

diff --git a/res/values/projekt_colors.xml b/res/values/projekt_colors.xml
index afde5ae973..2bee210dfd 100644
--- a/res/values/projekt_colors.xml
+++ b/res/values/projekt_colors.xml
@@ -31,5 +31,12 @@
     <color name="storage_summary_title_color">@*android:color/accent_device_default_light</color>
     <!-- Gesture settings switchbar background -->
     <color name="gestures_switchbar_color">@android:color/white</color>
-
+    <!-- Storage icons -->
+    <color name="storage_public">#ff9e9e9e</color>
+    <color name="storage_warning">#fff4511e</color>
+    <color name="storage_private_1">#ff26a69a</color>
+    <color name="storage_private_2">#ffab47bc</color>
+    <color name="storage_private_3">#fff2a600</color>
+    <color name="storage_private_4">#ffec407a</color>
+    <color name="storage_private_5">#ffc0ca33</color>
 </resources>
diff --git a/src/com/android/settings/deviceinfo/StorageSettings.java b/src/com/android/settings/deviceinfo/StorageSettings.java
index 5b51a82bde..38be6d7b4f 100755
--- a/src/com/android/settings/deviceinfo/StorageSettings.java
+++ b/src/com/android/settings/deviceinfo/StorageSettings.java
@@ -24,6 +24,7 @@ import android.app.Fragment;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
+import android.content.res.Resources ;
 import android.graphics.Color;
 import android.graphics.drawable.Drawable;
 import android.os.AsyncTask;
@@ -75,16 +76,22 @@ public class StorageSettings extends SettingsPreferenceFragment implements Index
     private static final String TAG_VOLUME_UNMOUNTED = "volume_unmounted";
     private static final String TAG_DISK_INIT = "disk_init";
 
-    static final int COLOR_PUBLIC = Color.parseColor("#ff9e9e9e");
-    static final int COLOR_WARNING = Color.parseColor("#fff4511e");
+    static int getColorPublic(Resources resources) {
+        return resources.getColor(R.color.storage_public);
+    }
+    static int getColorWarning(Resources resources) {
+        return resources.getColor(R.color.storage_warning);
+    }
 
-    static final int[] COLOR_PRIVATE = new int[] {
-            Color.parseColor("#ff26a69a"),
-            Color.parseColor("#ffab47bc"),
-            Color.parseColor("#fff2a600"),
-            Color.parseColor("#ffec407a"),
-            Color.parseColor("#ffc0ca33"),
-    };
+    static int[] getColorPrivate(Resources resources) {
+        return new int[] {
+                resources.getColor(R.color.storage_private_1),
+                resources.getColor(R.color.storage_private_2),
+                resources.getColor(R.color.storage_private_3),
+                resources.getColor(R.color.storage_private_4),
+                resources.getColor(R.color.storage_private_5),
+        };
+    }
 
     private StorageManager mStorageManager;
 
@@ -168,11 +175,12 @@ public class StorageSettings extends SettingsPreferenceFragment implements Index
         Collections.sort(volumes, VolumeInfo.getDescriptionComparator());
 
         long primaryPhysicalTotalSpace = PrivateStorageInfo.getPrimaryPhysicalTotalSpace(volumes);
+        int[] colorPrivate = getColorPrivate(getResources());
         for (VolumeInfo vol : volumes) {
             if (vol.getType() == VolumeInfo.TYPE_PRIVATE) {
                 final long volumeTotalBytes = PrivateStorageInfo.getTotalSize(vol,
                         sTotalInternalStorage) - primaryPhysicalTotalSpace;
-                final int color = COLOR_PRIVATE[privateCount++ % COLOR_PRIVATE.length];
+                final int color = colorPrivate[privateCount++ % colorPrivate.length];
                 mInternalCategory.addPreference(
                         new StorageVolumePreference(context, vol, color, volumeTotalBytes));
                 if (vol.isMountedReadable()) {
@@ -182,7 +190,7 @@ public class StorageSettings extends SettingsPreferenceFragment implements Index
                 }
             } else if (vol.getType() == VolumeInfo.TYPE_PUBLIC) {
                 StorageVolumePreference ExStorageVolumePreference =
-                        new StorageVolumePreference(context, vol, COLOR_PUBLIC, 0);
+                        new StorageVolumePreference(context, vol, getColorPublic(getResources()), 0);
 
                 //Disable preference when in change
                 ExStorageVolumePreference.setEnabled(vol.getState()!= VolumeInfo.STATE_CHECKING
@@ -199,7 +207,7 @@ public class StorageSettings extends SettingsPreferenceFragment implements Index
                 // TODO: add actual storage type to record
                 final Drawable icon = context.getDrawable(R.drawable.ic_sim_sd);
                 icon.mutate();
-                icon.setTint(COLOR_PUBLIC);
+                icon.setTint(getColorPublic(getResources()));
 
                 final Preference pref = new Preference(context);
                 pref.setKey(rec.getFsUuid());
diff --git a/src/com/android/settings/deviceinfo/StorageVolumePreference.java b/src/com/android/settings/deviceinfo/StorageVolumePreference.java
index 9d3c7dccf2..8a2780a90b 100644
--- a/src/com/android/settings/deviceinfo/StorageVolumePreference.java
+++ b/src/com/android/settings/deviceinfo/StorageVolumePreference.java
@@ -91,7 +91,7 @@ public class StorageVolumePreference extends Preference {
             }
 
             if (freeBytes < mStorageManager.getStorageLowBytes(path)) {
-                mColor = StorageSettings.COLOR_WARNING;
+                mColor = StorageSettings.getColorWarning(context.getResources());
                 icon = context.getDrawable(R.drawable.ic_warning_24dp);
             }
 
