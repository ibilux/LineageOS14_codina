Subject: [PATCH] Add Flashlight blink delay [2/3]

diff --git a/res/values/cr_strings.xml b/res/values/cr_strings.xml
index 577b95c6..259b45bb 100644
--- a/res/values/cr_strings.xml
+++ b/res/values/cr_strings.xml
@@ -101,4 +101,7 @@
     <string name="flashlight_on_call_dnd">Blink flashlight only in DND mode</string>
     <string name="flashlight_on_call_always">Always blink flashlight</string>
 
+    <!-- Flashlight delay -->
+    <string name="flashlight_on_call_delay_title">Flashlight delay on call</string>
+
 </resources>
diff --git a/res/xml/animation_settings.xml b/res/xml/animation_settings.xml
index 07e909a8..937e55af 100644
--- a/res/xml/animation_settings.xml
+++ b/res/xml/animation_settings.xml
@@ -37,4 +37,14 @@
         android:entries="@array/flashlight_on_call_entries"
         android:entryValues="@array/flashlight_on_call_values" />
 
+    <com.android.settings.cyanogenmod.CustomSeekBarPreference
+        android:key="flashlight_delay"
+        android:title="@string/flashlight_on_call_delay_title"
+        android:max="1000"
+        settings:min="100"
+        settings:interval="100"
+        android:defaultValue="500"
+        settings:units=""
+        android:persistent="false" />
+
 </PreferenceScreen>
diff --git a/src/com/android/settings/cyanogenmod/AnimationSettings.java b/src/com/android/settings/cyanogenmod/AnimationSettings.java
index f0e1c138..9db8a37d 100644
--- a/src/com/android/settings/cyanogenmod/AnimationSettings.java
+++ b/src/com/android/settings/cyanogenmod/AnimationSettings.java
@@ -32,6 +32,7 @@
 
 import com.android.settings.R;
 import com.android.settings.SettingsPreferenceFragment;
+import com.android.settings.cyanogenmod.CustomSeekBarPreference;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -50,12 +51,14 @@ public void onCreate(Bundle savedInstanceState) {
     private static final String SCROLLINGCACHE_DEFAULT = "1";
     private static final String SCREEN_OFF_ANIMATION = "screen_off_animation";
     private static final String FLASHLIGHT_ON_CALL = "flashlight_on_call";
+    private static final String FLASHLIGHT_DELAY = "flashlight_delay";
 
     private Context mContext;
 
     private ListPreference mScrollingCachePref;
     private ListPreference mScreenOffAnimations;
     private ListPreference mFlashlightOnCall;
+    private CustomSeekBarPreference mFlashlightDelay;
 
     @Override
     protected int getMetricsCategory() {
@@ -93,6 +96,12 @@ public void onCreate(Bundle savedInstanceState) {
         mFlashlightOnCall.setSummary(mFlashlightOnCall.getEntry());
         mFlashlightOnCall.setOnPreferenceChangeListener(this);
 
+        mFlashlightDelay = (CustomSeekBarPreference) findPreference(FLASHLIGHT_DELAY);
+        int flDelay = Settings.System.getInt(resolver,
+                Settings.System.FLASHLIGHT_DELAY, 500);
+        mFlashlightDelay.setValue(flDelay / 1);
+        mFlashlightDelay.setOnPreferenceChangeListener(this);
+
     }
 
     @Override
@@ -121,6 +130,11 @@ public boolean onPreferenceChange(Preference preference, Object newValue) {
             mFlashlightOnCall.setValue(String.valueOf(flashlightValue));
             mFlashlightOnCall.setSummary(mFlashlightOnCall.getEntry());
             return true;
+        } else if (preference == mFlashlightDelay) {
+            int flashlightDelay = (Integer) newValue;
+            Settings.System.putInt(resolver,
+                    Settings.System.FLASHLIGHT_DELAY, flashlightDelay * 1);
+            return true;
         }
         return false;
     }
diff --git a/res/layout/preference_custom_seekbar.xml b/res/layout/preference_custom_seekbar.xml
new file mode 100644
index 0000000000..f872b5ecf6
--- /dev/null
+++ b/res/layout/preference_custom_seekbar.xml
@@ -0,0 +1,76 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2014-2016 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:minHeight="?android:attr/listPreferredItemHeight"
+    android:gravity="center_vertical"
+    android:paddingStart="?android:attr/listPreferredItemPaddingStart"
+    android:paddingEnd="?android:attr/listPreferredItemPaddingEnd"
+    android:clickable="false" >
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="vertical"
+        android:layout_marginTop="8dip"
+        android:layout_marginBottom="8dip">
+
+        <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content">
+            <TextView android:id="@android:id/title"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:singleLine="true"
+                android:textAppearance="@android:style/TextAppearance.Material.Subhead"
+                android:textColor="?android:attr/textColorPrimary"
+                android:ellipsize="marquee"
+                android:fadingEdge="horizontal" />
+            <!-- Preference should place its actual preference widget here. -->
+            <LinearLayout android:id="@android:id/widget_frame"
+                android:layout_width="wrap_content"
+                android:layout_height="match_parent"
+                android:gravity="end|center_vertical"
+                android:paddingStart="16dp"
+                android:orientation="vertical" />
+        </LinearLayout>
+
+        <RelativeLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="6dp">
+
+            <TextView android:id="@+id/seekBarPrefValue"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_centerInParent="true"
+                android:layout_alignParentRight="true"
+                android:textAppearance="@android:style/TextAppearance.Material.Body1"
+                android:textColor="?android:attr/textColorSecondary" />
+
+            <LinearLayout android:id="@+id/seekBarPrefBarContainer"
+                android:layout_centerInParent="true"
+                android:layout_width="fill_parent"
+                android:layout_height="wrap_content"
+                android:layout_toLeftOf="@id/seekBarPrefValue" />
+        </RelativeLayout>
+
+    </LinearLayout>
+
+</FrameLayout>
diff --git a/res/values/hnt_attrs.xml b/res/values/hnt_attrs.xml
new file mode 100644
index 0000000000..db4c8eb2ae
--- /dev/null
+++ b/res/values/hnt_attrs.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2008 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<resources>
+    <!-- Base attributes available to CustomSeekBarPreference. -->
+    <declare-styleable name="CustomSeekBarPreference">
+        <attr name="interval" format="integer" />
+        <attr name="min" format="integer" />
+        <attr name="units" format="string|reference" />
+    </declare-styleable>
+</resources>
diff --git a/src/com/android/settings/cyanogenmod/CustomSeekBarPreference.java b/src/com/android/settings/cyanogenmod/CustomSeekBarPreference.java
new file mode 100644
index 0000000000..07cd63e1c5
--- /dev/null
+++ b/src/com/android/settings/cyanogenmod/CustomSeekBarPreference.java
@@ -0,0 +1,222 @@
+/*
+ * Copyright (C) 2016 The Dirty Unicorns Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License
+ */
+
+package com.android.settings.cyanogenmod;
+
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.view.ViewParent;
+import android.view.ViewGroup;
+import android.widget.SeekBar;
+import android.widget.TextView;
+import android.support.v7.preference.*;
+
+import com.android.settings.R;
+
+public class CustomSeekBarPreference extends Preference implements SeekBar.OnSeekBarChangeListener {
+    private final String TAG = getClass().getName();
+    private static final String SETTINGS_NS = "http://schemas.android.com/apk/res/com.android.settings";
+    private static final String ANDROIDNS = "http://schemas.android.com/apk/res/android";
+    private static final int DEFAULT_VALUE = 50;
+
+    private int mMin = 0;
+    private int mInterval = 1;
+    private int mCurrentValue;
+    private int mDefaultValue = -1;
+    private int mMax = 100;
+    private String mUnits = "";
+    private SeekBar mSeekBar;
+    private TextView mTitle;
+    private TextView mStatusText;
+
+    public CustomSeekBarPreference(Context context, AttributeSet attrs, int defStyleAttr,
+            int defStyleRes) {
+        super(context, attrs, defStyleAttr, defStyleRes);
+        final TypedArray a = context.obtainStyledAttributes(
+                attrs, R.styleable.CustomSeekBarPreference);
+
+        mMax = attrs.getAttributeIntValue(ANDROIDNS, "max", 100);
+        mMin = attrs.getAttributeIntValue(SETTINGS_NS, "min", 0);
+        mDefaultValue = attrs.getAttributeIntValue(ANDROIDNS, "defaultValue", -1);
+        mUnits = getAttributeStringValue(attrs, SETTINGS_NS, "units", "");
+
+        Integer id = a.getResourceId(R.styleable.CustomSeekBarPreference_units, 0);
+        if (id > 0) {
+            mUnits = context.getResources().getString(id);
+        }
+
+        try {
+            String newInterval = attrs.getAttributeValue(SETTINGS_NS, "interval");
+            if (newInterval != null)
+                mInterval = Integer.parseInt(newInterval);
+        } catch (Exception e) {
+            Log.e(TAG, "Invalid interval value", e);
+        }
+
+        a.recycle();
+        mSeekBar = new SeekBar(context, attrs);
+        mSeekBar.setMax(mMax - mMin);
+        mSeekBar.setOnSeekBarChangeListener(this);
+        setLayoutResource(R.layout.preference_custom_seekbar);
+    }
+
+    public CustomSeekBarPreference(Context context, AttributeSet attrs, int defStyleAttr) {
+        this(context, attrs, defStyleAttr, 0);
+    }
+
+    public CustomSeekBarPreference(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    public CustomSeekBarPreference(Context context) {
+        this(context, null);
+    }
+
+    private String getAttributeStringValue(AttributeSet attrs, String namespace, String name,
+            String defaultValue) {
+        String value = attrs.getAttributeValue(namespace, name);
+        if (value == null)
+            value = defaultValue;
+
+        return value;
+    }
+
+    @Override
+    public void onDependencyChanged(Preference dependency, boolean disableDependent) {
+        super.onDependencyChanged(dependency, disableDependent);
+        this.setShouldDisableView(true);
+        if (mTitle != null)
+            mTitle.setEnabled(!disableDependent);
+        if (mSeekBar != null)
+            mSeekBar.setEnabled(!disableDependent);
+        if (mStatusText != null)
+            mStatusText.setEnabled(!disableDependent);
+    }
+
+    @Override
+    public void onBindViewHolder(PreferenceViewHolder view) {
+        super.onBindViewHolder(view);
+        try
+        {
+            // move our seekbar to the new view we've been given
+            ViewParent oldContainer = mSeekBar.getParent();
+            ViewGroup newContainer = (ViewGroup) view.findViewById(R.id.seekBarPrefBarContainer);
+
+            if (oldContainer != newContainer) {
+                // remove the seekbar from the old view
+                if (oldContainer != null) {
+                    ((ViewGroup) oldContainer).removeView(mSeekBar);
+                }
+                // remove the existing seekbar (there may not be one) and add ours
+                newContainer.removeAllViews();
+                newContainer.addView(mSeekBar, ViewGroup.LayoutParams.FILL_PARENT,
+                        ViewGroup.LayoutParams.WRAP_CONTENT);
+            }
+        } catch (Exception ex) {
+            Log.e(TAG, "Error binding view: " + ex.toString());
+        }
+        mStatusText = (TextView) view.findViewById(R.id.seekBarPrefValue);
+        mStatusText.setText(String.valueOf(mCurrentValue) + mUnits);
+        mStatusText.setMinimumWidth(30);
+        mSeekBar.setProgress(mCurrentValue - mMin);
+        mTitle = (TextView) view.findViewById(android.R.id.title);
+    }
+
+    public void setMax(int max) {
+        mMax = max;
+        mSeekBar.setMax(mMax - mMin);
+    }
+
+    public void setMin(int min) {
+        mMin = min;
+        mSeekBar.setMax(mMax - mMin);
+    }
+
+    public void setIntervalValue(int value) {
+        mInterval = value;
+    }
+
+    public void setValue(int value) {
+        mCurrentValue = value;
+    }
+
+    @Override
+    public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
+        int newValue = progress + mMin;
+        if (newValue > mMax)
+            newValue = mMax;
+        else if (newValue < mMin)
+            newValue = mMin;
+        else if (mInterval != 1 && newValue % mInterval != 0)
+            newValue = Math.round(((float) newValue) / mInterval) * mInterval;
+
+        // change rejected, revert to the previous value
+        if (!callChangeListener(newValue)) {
+            seekBar.setProgress(mCurrentValue - mMin);
+            return;
+        }
+        // change accepted, store it
+        mCurrentValue = newValue;
+        if (mStatusText != null) {
+            mStatusText.setText(String.valueOf(newValue) + mUnits);
+        }
+        persistInt(newValue);
+    }
+
+    @Override
+    public void onStartTrackingTouch(SeekBar seekBar) {
+    }
+
+    @Override
+    public void onStopTrackingTouch(SeekBar seekBar) {
+        notifyChanged();
+    }
+
+    @Override
+    protected Object onGetDefaultValue(TypedArray ta, int index) {
+        int defaultValue = ta.getInt(index, DEFAULT_VALUE);
+        return defaultValue;
+    }
+
+    @Override
+    protected void onSetInitialValue(boolean restoreValue, Object defaultValue) {
+        if (restoreValue) {
+            mCurrentValue = getPersistedInt(mCurrentValue);
+        }
+        else {
+            int temp = 0;
+            try {
+                temp = (Integer) defaultValue;
+            } catch (Exception ex) {
+                Log.e(TAG, "Invalid default value: " + defaultValue.toString());
+            }
+            persistInt(temp);
+            mCurrentValue = temp;
+        }
+    }
+
+    @Override
+    public void setEnabled(boolean enabled) {
+        if (mSeekBar != null && mStatusText != null && mTitle != null) {
+            mSeekBar.setEnabled(enabled);
+            mStatusText.setEnabled(enabled);
+            mTitle.setEnabled(enabled);
+        }
+        super.setEnabled(enabled);
+    }
+}
