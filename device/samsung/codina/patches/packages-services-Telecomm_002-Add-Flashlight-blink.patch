Subject: [PATCH] Telecomm: Add Flashlight blink on incoming calls [3/3]

  Add 4 different cases disabled, ringer, dnd mode and always on.
  Add a delay of 500ms for making it blink faster

diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index 4f1cb8bf..1decc30e 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -44,6 +44,7 @@
     <uses-permission android:name="android.permission.WRITE_CALL_LOG" />
     <uses-permission android:name="android.permission.READ_BLOCKED_NUMBERS" />
     <uses-permission android:name="android.permission.WRITE_BLOCKED_NUMBERS" />
+    <uses-permission android:name="android.permission.CAMERA" />
 
     <permission
             android:name="android.permission.BROADCAST_CALLLOG_INFO"
@@ -65,6 +66,8 @@
             android:label="Process phone account registration"
             android:protectionLevel="signature|system"/>
 
+    <uses-feature android:name="android.hardware.camera" />
+
     <application android:label="@string/telecommAppLabel"
             android:icon="@mipmap/ic_launcher_phone"
             android:allowBackup="false"
diff --git a/src/com/android/server/telecom/Ringer.java b/src/com/android/server/telecom/Ringer.java
index 7d174896..cccdc013 100644
--- a/src/com/android/server/telecom/Ringer.java
+++ b/src/com/android/server/telecom/Ringer.java
@@ -16,15 +16,20 @@
 
 package com.android.server.telecom;
 
+import android.content.pm.PackageManager;
+import android.hardware.camera2.CameraManager;
 import android.app.Notification;
 import android.app.NotificationManager;
 import android.content.ContentResolver;
 import android.content.Context;
 import android.media.AudioAttributes;
 import android.media.AudioManager;
 import android.net.Uri;
+import android.os.AsyncTask;
 import android.os.Bundle;
+import android.os.UserHandle;
 import android.os.Vibrator;
+import android.provider.Settings;
 
 import com.android.internal.annotations.VisibleForTesting;
 import cyanogenmod.providers.CMSettings;
@@ -63,6 +68,8 @@
     private InCallTonePlayer mCallWaitingPlayer;
     private RingtoneFactory mRingtoneFactory;
 
+    private TorchToggler torchToggler;
+
     /**
      * Call objects that are ringing, vibrating or call-waiting. These are used only for logging
      * purposes.
@@ -76,6 +83,8 @@
      */
     private boolean mIsVibrating = false;
 
+    private int torchMode;
+
     /** Initializes the Ringer. */
     @VisibleForTesting
     public Ringer(
@@ -96,6 +104,9 @@
         mRingtonePlayer = asyncRingtonePlayer;
         mRingtoneFactory = ringtoneFactory;
         mInCallController = inCallController;
+
+        torchToggler = new TorchToggler(context);
+
     }
 
     public boolean startRinging(Call foregroundCall) {
@@ -148,6 +160,18 @@ public boolean startRinging(Call foregroundCall, boolean isHfpDeviceAttached) {
             Log.i(this, "startRingingOrCallWaiting, skipping because volume is 0");
         }
 
+        boolean isFlashlight = ringAllowed && isRingerAudible;
+        boolean dndMode = !isFlashlight;
+        torchMode = Settings.System.getIntForUser(mContext.getContentResolver(),
+                 Settings.System.FLASHLIGHT_ON_CALL, 0, UserHandle.USER_CURRENT);
+
+        boolean shouldFlash = (torchMode == 1 && !dndMode) ||
+                              (torchMode == 2 && dndMode)  ||
+                               torchMode == 3;
+        if (shouldFlash) {
+            blinkFlashlight();
+        }
+
         if (vibrationAllowed && shouldVibrate(mContext, foregroundCall) && !mIsVibrating) {
             mVibratingCall = foregroundCall;
             mVibrator.vibrate(VIBRATION_PATTERN, VIBRATION_PATTERN_REPEAT,
@@ -160,6 +184,11 @@ public boolean startRinging(Call foregroundCall, boolean isHfpDeviceAttached) {
         return isRingerAudible;
     }
 
+    private void blinkFlashlight() {
+        torchToggler = new TorchToggler(mContext);
+        torchToggler.execute();
+    }
+
     public void startCallWaiting(Call call) {
         if (mSystemSettingsUtil.isTheaterModeOn(mContext)) {
             return;
@@ -190,6 +219,7 @@ public void stopRinging() {
         }
 
         mRingtonePlayer.stop();
+        torchToggler.stop();
 
         if (mIsVibrating) {
             Log.event(mVibratingCall, Log.Events.STOP_VIBRATOR);
@@ -255,4 +285,46 @@ public void vibrate(int v1, int p1, int v2) {
         }
         return mSystemSettingsUtil.canVibrateWhenRinging(context);
     }
+
+    private class TorchToggler extends AsyncTask {
+
+        private boolean shouldStop = false;
+        private CameraManager cameraManager;
+        private int duration = 500;
+        private boolean hasFlash = true;
+        private Context context;
+
+        public TorchToggler(Context ctx) {
+            this.context = ctx;
+            init();
+        }
+
+        private void init() {
+            cameraManager = (CameraManager) context.getSystemService(Context.CAMERA_SERVICE);
+            hasFlash = context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA_FLASH);
+        }
+
+        void stop() {
+            shouldStop = true;
+        }
+
+        @Override
+        protected Object doInBackground(Object[] objects) {
+            if (hasFlash) {
+                try {
+                    String cameraId = cameraManager.getCameraIdList()[0];
+                    while (!shouldStop) {
+                        cameraManager.setTorchMode(cameraId, true);
+                        Thread.sleep(duration);
+
+                        cameraManager.setTorchMode(cameraId, false);
+                        Thread.sleep(duration);
+                    }
+                } catch (Exception e) {
+                    e.printStackTrace();
+                }
+            }
+            return null;
+        }
+    }
 }
