Subject: [PATCH] Sensor: Add minimum delay check in SensorDevice

SensorService is not able to limit the delay values requested by SensorFusion
algorithms as these algorithms directly set the delay using SensorDevice:batch
function so HAL/driver could receive a delay value less than the minimum
allowed value. Requesting sensor to run at improper value could lead to
undesired behaviour and results.
Therefore, it is best to put the minimum delay check in SensorDevice in order
to limit all delay values requested from upstream before forwading them to HAL.

Test: On a device which has specified minimum delay of gyro sensor as 10ms,
activate software rotation vector sensor which activates gyro sensor at 200Hz
and check if gyro sensor rate is 100Hz.

diff --git a/services/sensorservice/SensorDevice.cpp b/services/sensorservice/SensorDevice.cpp
index ac03742..dbe9bea 100644
--- a/services/sensorservice/SensorDevice.cpp
+++ b/services/sensorservice/SensorDevice.cpp
@@ -64,6 +64,7 @@
             Info model;
             for (size_t i=0 ; i<size_t(count) ; i++) {
                 mActivationCount.add(list[i].handle, model);
+                minDelayMap[list[i].handle] = list[i].minDelay * 1000;
                 mSensorDevice->activate(
                         reinterpret_cast<struct sensors_poll_device_t *>(mSensorDevice),
                         list[i].handle, 0);
@@ -236,6 +237,12 @@
                              int64_t maxBatchReportLatencyNs) {
     if (!mSensorDevice) return NO_INIT;
 
+    if (minDelayMap.find(handle) != minDelayMap.end()) {
+        if (samplingPeriodNs < minDelayMap[handle]) {
+            samplingPeriodNs = minDelayMap[handle];
+        }
+    }
+
     if (samplingPeriodNs < MINIMUM_EVENTS_PERIOD) {
         samplingPeriodNs = MINIMUM_EVENTS_PERIOD;
     }
@@ -299,6 +306,13 @@
 
 status_t SensorDevice::setDelay(void* ident, int handle, int64_t samplingPeriodNs) {
     if (!mSensorDevice) return NO_INIT;
+
+    if (minDelayMap.find(handle) != minDelayMap.end()) {
+        if (samplingPeriodNs < minDelayMap[handle]) {
+            samplingPeriodNs = minDelayMap[handle];
+        }
+    }
+
     if (samplingPeriodNs < MINIMUM_EVENTS_PERIOD) {
         samplingPeriodNs = MINIMUM_EVENTS_PERIOD;
     }
diff --git a/services/sensorservice/SensorDevice.h b/services/sensorservice/SensorDevice.h
index d340da3..606577c 100644
--- a/services/sensorservice/SensorDevice.h
+++ b/services/sensorservice/SensorDevice.h
@@ -27,6 +27,8 @@
 #include <stdint.h>
 #include <sys/types.h>
 
+#include <unordered_map>
+
 // ---------------------------------------------------------------------------
 
 namespace android {
@@ -109,6 +111,8 @@
     SortedVector<void *> mDisabledClients;
     SensorDevice();
 
+    std::unordered_map<int, nsecs_t> minDelayMap;
+
     bool isClientDisabled(void* ident);
     bool isClientDisabledLocked(void* ident);
 };
diff --git a/services/sensorservice/SensorFusion.cpp b/services/sensorservice/SensorFusion.cpp
index 9863f62..0b819aa 100644
--- a/services/sensorservice/SensorFusion.cpp
+++ b/services/sensorservice/SensorFusion.cpp
@@ -18,6 +18,8 @@
 #include "SensorFusion.h"
 #include "SensorService.h"
 
+#include <inttypes.h>
+
 namespace android {
 // ---------------------------------------------------------------------------
 
@@ -157,6 +159,11 @@
 }
 
 status_t SensorFusion::setDelay(int mode, void* ident, int64_t ns) {
+
+   ALOGD_IF(DEBUG_CONNECTIONS,
+            "SensorFusion::setDelay[acc=%" PRId64 ", mag=%" PRId64 ", gyro=%" PRId64 "]",
+            ns, ms2ns(20), mTargetDelayNs);
+
     // Call batch with timeout zero instead of setDelay().
     if (ns > (int64_t)5e7) {
         ns = (int64_t)(5e7);
