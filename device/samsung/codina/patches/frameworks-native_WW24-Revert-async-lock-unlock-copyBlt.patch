Subject: [PATCH] Surface: Use async lock/unlock in copyBlt

The Surface::lock() function now uses the asynchronous versions of
gralloc lock/unlock when copying the previously drawn content to the
backbuffer. This allows for optimisations in the gralloc module
implementation and so can improve performance and avoid CPU waits.

diff --git a/libs/gui/Surface.cpp b/libs/gui/Surface.cpp
index 75e1ce0..d423d12 100644
--- a/libs/gui/Surface.cpp
+++ b/libs/gui/Surface.cpp
@@ -20,6 +20,13 @@
 
 #include <android/native_window.h>
 
+// We would eliminate the non-conforming zero-length array, but we can't since
+// this is effectively included from the Linux kernel
+#pragma clang diagnostic push
+#pragma clang diagnostic ignored "-Wzero-length-array"
+#include <sync/sync.h>
+#pragma clang diagnostic pop
+
 #include <binder/Parcel.h>
 
 #include <utils/Log.h>
@@ -1178,8 +1185,7 @@
 static status_t copyBlt(
         const sp<GraphicBuffer>& dst,
         const sp<GraphicBuffer>& src,
-        const Region& reg,
-        int *dstFenceFd)
+        const Region& reg)
 {
     // src and dst with, height and format must be identical. no verification
     // is done here.
@@ -1190,10 +1196,9 @@
     ALOGE_IF(err, "error locking src buffer %s", strerror(-err));
 
     uint8_t* dst_bits = NULL;
-    err = dst->lockAsync(GRALLOC_USAGE_SW_WRITE_OFTEN, reg.bounds(),
-            reinterpret_cast<void**>(&dst_bits), *dstFenceFd);
+    err = dst->lock(GRALLOC_USAGE_SW_WRITE_OFTEN, reg.bounds(),
+            reinterpret_cast<void**>(&dst_bits));
     ALOGE_IF(err, "error locking dst buffer %s", strerror(-err));
-    *dstFenceFd = -1;
 
     Region::const_iterator head(reg.begin());
     Region::const_iterator tail(reg.end());
@@ -1227,7 +1232,7 @@
         src->unlock();
 
     if (dst_bits)
-        dst->unlockAsync(dstFenceFd);
+        dst->unlock();
 
     return err;
 }
@@ -1288,7 +1293,12 @@
             }
             const Region copyback(oldDirtyRegion.subtract(newDirtyRegion));
             if (!copyback.isEmpty()) {
-                copyBlt(backBuffer, frontBuffer, copyback, &fenceFd);
+                if (fenceFd >= 0) {
+                    sync_wait(fenceFd, -1);
+                    close(fenceFd);
+                    fenceFd = -1;
+                }
+                copyBlt(backBuffer, frontBuffer, copyback);
             }
         } else {
             // if we can't copy-back anything, modify the user's dirty
