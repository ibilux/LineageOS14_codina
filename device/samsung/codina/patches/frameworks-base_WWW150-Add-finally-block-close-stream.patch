Subject: [PATCH] PackageManagerService: Add finally block to close the stream
 pm: Fixes can not boot issue
 Sometime the bad file foramt will cause the device
 can not be boot, so we need to delete the bad file
 and throw an exception to try reboot.

diff --git a/services/core/java/com/android/server/pm/Settings.java b/services/core/java/com/android/server/pm/Settings.java
index c4e0c7de6ef..68959d714bf 100644
--- a/services/core/java/com/android/server/pm/Settings.java
+++ b/services/core/java/com/android/server/pm/Settings.java
@@ -2965,18 +2965,15 @@ boolean readLPw(@NonNull List<UserInfo> users) {
                     XmlUtils.skipCurrentTag(parser);
                 }
             }
-
-            str.close();
-
-        } catch (XmlPullParserException e) {
-            mReadMessages.append("Error reading: " + e.toString());
-            PackageManagerService.reportSettingsProblem(Log.ERROR, "Error reading settings: " + e);
-            Slog.wtf(PackageManagerService.TAG, "Error reading package manager settings", e);
-
-        } catch (java.io.IOException e) {
+        } catch (XmlPullParserException | IOException | NumberFormatException e) {
+            mSettingsFilename.delete();
             mReadMessages.append("Error reading: " + e.toString());
             PackageManagerService.reportSettingsProblem(Log.ERROR, "Error reading settings: " + e);
             Slog.wtf(PackageManagerService.TAG, "Error reading package manager settings", e);
+            throw new IllegalStateException("Failed parsing settings file: "
+                    + mSettingsFilename , e);
+        } finally {
+            IoUtils.closeQuietly(str);
         }
 
         // If the build is setup to drop runtime permissions
diff --git a/services/core/java/com/android/server/pm/Settings.java b/services/core/java/com/android/server/pm/Settings.java
index c4e0c7de6ef..68959d714bf 100644
--- a/services/core/java/com/android/server/pm/Settings.java
+++ b/services/core/java/com/android/server/pm/Settings.java
@@ -1743,22 +1743,16 @@ void readPackageRestrictionsLPr(int userId) {
                 }
             }
 
-            str.close();
-
             mNextAppLinkGeneration.put(userId, maxAppLinkGeneration + 1);
 
-        } catch (XmlPullParserException e) {
+        } catch (XmlPullParserException | java.io.IOException e) {
             mReadMessages.append("Error reading: " + e.toString());
             PackageManagerService.reportSettingsProblem(Log.ERROR,
-                    "Error reading stopped packages: " + e);
-            Slog.wtf(PackageManagerService.TAG, "Error reading package manager stopped packages",
-                    e);
-
-        } catch (java.io.IOException e) {
-            mReadMessages.append("Error reading: " + e.toString());
-            PackageManagerService.reportSettingsProblem(Log.ERROR, "Error reading settings: " + e);
-            Slog.wtf(PackageManagerService.TAG, "Error reading package manager stopped packages",
+                    "Error reading package restrictions: " + e);
+            Slog.wtf(PackageManagerService.TAG, "Error reading package manager package restrictions",
                     e);
+        } finally {
+            IoUtils.closeQuietly(str);
         }
     }
 
@@ -2083,7 +2077,6 @@ void writePackageRestrictionsLPr(int userId) {
                     "Unable to write package manager user packages state, "
                     + " current changes will be lost at reboot", e);
         }
-
         // Clean up partially written files
         if (userPackagesStateFile.exists()) {
             if (!userPackagesStateFile.delete()) {
@@ -2268,22 +2261,14 @@ void readStoppedLPw() {
                     XmlUtils.skipCurrentTag(parser);
                 }
             }
-
-            str.close();
-
-        } catch (XmlPullParserException e) {
+        } catch (XmlPullParserException | java.io.IOException e) {
             mReadMessages.append("Error reading: " + e.toString());
             PackageManagerService.reportSettingsProblem(Log.ERROR,
                     "Error reading stopped packages: " + e);
             Slog.wtf(PackageManagerService.TAG, "Error reading package manager stopped packages",
                     e);
-
-        } catch (java.io.IOException e) {
-            mReadMessages.append("Error reading: " + e.toString());
-            PackageManagerService.reportSettingsProblem(Log.ERROR, "Error reading settings: " + e);
-            Slog.wtf(PackageManagerService.TAG, "Error reading package manager stopped packages",
-                    e);
-
+        } finally {
+            IoUtils.closeQuietly(str);
         }
     }
 
@@ -2441,13 +2426,11 @@ void writeLPr() {
             writeAllRuntimePermissionsLPr();
             return;
 
-        } catch(XmlPullParserException e) {
-            Slog.wtf(PackageManagerService.TAG, "Unable to write package manager settings, "
-                    + "current changes will be lost at reboot", e);
-        } catch(java.io.IOException e) {
+        } catch(XmlPullParserException | java.io.IOException e) {
             Slog.wtf(PackageManagerService.TAG, "Unable to write package manager settings, "
                     + "current changes will be lost at reboot", e);
         }
+
         // Clean up partially written files
         if (mSettingsFilename.exists()) {
             if (!mSettingsFilename.delete()) {
@@ -2965,13 +2948,10 @@ boolean readLPw(@NonNull List<UserInfo> users) {
                     XmlUtils.skipCurrentTag(parser);
                 }
             }
-        } catch (XmlPullParserException | IOException | NumberFormatException e) {
-            mSettingsFilename.delete();
+        } catch (XmlPullParserException | java.io.IOException e) {
             mReadMessages.append("Error reading: " + e.toString());
             PackageManagerService.reportSettingsProblem(Log.ERROR, "Error reading settings: " + e);
             Slog.wtf(PackageManagerService.TAG, "Error reading package manager settings", e);
-            throw new IllegalStateException("Failed parsing settings file: "
-                    + mSettingsFilename , e);
         } finally {
             IoUtils.closeQuietly(str);
         }
@@ -3117,9 +3097,7 @@ void applyDefaultPreferredAppsLPw(PackageManagerService service, int userId) {
                     continue;
                 }
                 readDefaultPreferredActivitiesLPw(service, parser, userId);
-            } catch (XmlPullParserException e) {
-                Slog.w(TAG, "Error reading apps file " + f, e);
-            } catch (IOException e) {
+            } catch (XmlPullParserException | IOException e) {
                 Slog.w(TAG, "Error reading apps file " + f, e);
             } finally {
                 if (str != null) {
