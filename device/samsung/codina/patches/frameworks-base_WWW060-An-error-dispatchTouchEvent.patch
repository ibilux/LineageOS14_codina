Subject: [PATCH] An error of ViewGroup dispatchTouchEvent.

Follow the issue step, a crash must occur.
You should notice that whether click item or button,
the dialog will dismiss.

 The reason is that: dispatch UP event has a bug in this case.
 1.dispatchTransformedTouchEvent: will dispatch to dialog and dialog
  will responce then call dismiss.
 2.dismiss will cause viewgroup to dispatchDetachedFromWindow which
  will call recyle touchTarget.(recyle function just set child = null)
 3.after 2, do while again, then will meet child null Exception.

We should use if to avoid this case happen.

diff --git a/core/java/android/view/ViewGroup.java b/core/java/android/view/ViewGroup.java
index 776f119..0c664cb 100644
--- a/core/java/android/view/ViewGroup.java
+++ b/core/java/android/view/ViewGroup.java
@@ -2316,22 +2316,28 @@
                     if (alreadyDispatchedToNewTouchTarget && target == newTouchTarget) {
                         handled = true;
                     } else {
-                        final boolean cancelChild = resetCancelNextUpFlag(target.child)
-                                || intercepted;
-                        if (dispatchTransformedTouchEvent(ev, cancelChild,
-                                target.child, target.pointerIdBits)) {
-                            handled = true;
-                        }
-                        if (cancelChild) {
-                            if (predecessor == null) {
-                                mFirstTouchTarget = next;
-                            } else {
-                                predecessor.next = next;
+                        if (target.child != null) {
+                            final boolean cancelChild = resetCancelNextUpFlag(target.child)
+                                    || intercepted;
+                            //dispatchTransformedTouchEvent function may detach a window, which will call target.recycle() to set child = null. Be careful of child's NPE.
+                            if (dispatchTransformedTouchEvent(ev, cancelChild,
+                                    target.child, target.pointerIdBits)) {
+                                handled = true;
                             }
-                            target.recycle();
-                            target = next;
-                            continue;
-                        }
+                            if (cancelChild && (target.child != null)) {
+                                if (predecessor == null) {
+                                    mFirstTouchTarget = next;
+                                } else {
+                                    predecessor.next = next;
+                                }
+                                target.recycle();
+                                target = next;
+                                continue;
+                            }
+                        } else {
+                            Log.e(TAG,"Two pointers touch event. The first pointer has already up and dimiss a window, the second pointer will do nothing for the window is dismissed");
+                            break;
+                        }
                     }
                     predecessor = target;
                     target = next;
