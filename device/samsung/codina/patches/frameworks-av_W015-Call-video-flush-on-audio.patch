 nuplayer: Call video flush on audio teardown

When audio tear down happens, Audio gets flushed and
seek is issued. If we don't flush video before seek,
will see previous video buffers and this leads to AV
sync issues. Hence calling video flush.

diff --git a/media/libmediaplayerservice/nuplayer/NuPlayer.cpp b/media/libmediaplayerservice/nuplayer/NuPlayer.cpp
index 08342cf..ed7a200 100644
--- a/media/libmediaplayerservice/nuplayer/NuPlayer.cpp
+++ b/media/libmediaplayerservice/nuplayer/NuPlayer.cpp
@@ -1192,8 +1192,9 @@ void NuPlayer::onMessageReceived(const sp<AMessage> &msg) {
                 mRenderer->flush(
                         true /* audio */, false /* notifyComplete */);
                 if (mVideoDecoder != NULL) {
-                    mRenderer->flush(
-                            false /* audio */, false /* notifyComplete */);
+                    mDeferredActions.push_back(
+                            new FlushDecoderAction(FLUSH_CMD_NONE /* audio */,
+                                                   FLUSH_CMD_FLUSH /* video */));
                 }
                 mRenderer->signalAudioTearDownComplete();
 
@@ -1202,6 +1203,17 @@ void NuPlayer::onMessageReceived(const sp<AMessage> &msg) {
                     positionUs = mPreviousSeekTimeUs;
                 }
 
+                mDeferredActions.push_back(
+                    new SeekAction(positionUs));
+
+                // After a flush without shutdown, decoder is paused.
+                // Don't resume it until source seek is done, otherwise it could
+                // start pulling stale data too soon.
+                mDeferredActions.push_back(
+                        new ResumeDecoderAction(false));
+
+                processDeferredActions();
+
                 restartAudio(
                         positionUs, reason == Renderer::kForceNonOffload /* forceNonOffload */,
                         reason != Renderer::kDueToTimeout /* needsToCreateAudioDecoder */);
