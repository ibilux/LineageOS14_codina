 Add Restart SystemUI to reboot menu

Add utils from Settings app needed for this to work.
Messy, but it works.

diff --git a/core/java/com/android/internal/util/aicp/AbstractAsyncSuCMDProcessor.java b/core/java/com/android/internal/util/aicp/AbstractAsyncSuCMDProcessor.java
new file mode 100644
index 9000941..030f6bb
--- /dev/null
+++ b/core/java/com/android/internal/util/aicp/AbstractAsyncSuCMDProcessor.java
@@ -0,0 +1,102 @@
+package com.android.internal.util.aicp;
+
+import android.os.AsyncTask;
+
+/**
+ * An abstract implentation of AsyncTask
+ *
+ * since our needs are simple send a command, perform a task when we finish
+ * this implentation requires you send the command as String...
+ * in the .execute(String) so you can send String[] of commands if needed
+ *
+ * This class is not for you if...
+ *     1) You do not need to perform any action after command execution
+ *        you want a Thread not this.
+ *     2) You need to perform more complex tasks in doInBackground
+ *        than simple script/command sequence of commands
+ *        you want your own AsyncTask not this.
+ *
+ * This class is for you if...
+ *     1) You need to run a command/script/sequence of commands without
+ *        blocking the UI thread and you must perform actions after the
+ *        task completes.
+ *     2) see #1.
+ */
+public abstract class AbstractAsyncSuCMDProcessor extends AsyncTask<String, Void, String> {
+    // if /system needs to be mounted before command
+    private boolean mMountSystem;
+    // return if we recieve a null command or empty command
+    public final String FAILURE = "failed_no_command";
+
+    /**
+     * Constructor that allows mounting/dismounting
+     * of /system partition while in background thread
+     */
+    public AbstractAsyncSuCMDProcessor(boolean mountSystem) {
+         this.mMountSystem = mountSystem;
+    }
+
+    /**
+     * Constructor that assumes /system should not be mounted
+     */
+    public AbstractAsyncSuCMDProcessor() {
+         this.mMountSystem = false;
+    }
+
+    /**
+     * DO NOT override this method you should simply send your commands off
+     * as params and expect to handle results in {@link #onPostExecute}
+     *
+     * if you find a need to @Override this method then you should
+     * consider using a new AsyncTask implentation instead
+     *
+     * @param params The parameters of the task.
+     *
+     * @return A result, defined by the subclass of this task.
+     */
+    @Override
+    protected String doInBackground(String... params) {
+        // don't bother if we don't get a command
+        if (params[0] == null || params[0].trim().equals(""))
+            return FAILURE;
+
+        String stdout = null;
+
+        // conditionally enforce mounting
+        if (mMountSystem) {
+            Helpers.getMount("rw");
+        }
+        try {
+            // process all commands ***DO NOT SEND null OR ""; you have been warned***
+            for (int i = 0; params.length > i; i++) {
+                // always watch for null and empty strings, lazy devs :/
+                if (params[i] != null && !params[i].trim().equals("")) {
+                    stdout = CMDProcessor.runSuCommand(params[i]).getStdout();
+                } else {
+                    // bail because of careless devs
+                    return FAILURE;
+                }
+            }
+        // always unmount
+        } finally {
+            if (mMountSystem)
+                Helpers.getMount("ro");
+        }
+        // return the stdout from the command
+        return stdout;
+    }
+
+    /**
+     * <p>Runs on the UI thread after {@link #doInBackground}. The
+     * specified result is the value returned by {@link #doInBackground}.</p>
+     *
+     * <p>This method won't be invoked if the task was cancelled.</p>
+     *
+     * You MUST @Override this method if you don't need the result
+     * then you should consider using a new Thread implentation instead
+     *
+     * @param result The result of the operation computed by {@link #doInBackground}.
+     */
+    @Override
+    protected abstract void onPostExecute(String result);
+}
diff --git a/core/java/com/android/internal/util/aicp/CMDProcessor.java b/core/java/com/android/internal/util/aicp/CMDProcessor.java
new file mode 100644
index 9000941..031f6bb
--- /dev/null
+++ b/core/java/com/android/internal/util/aicp/CMDProcessor.java
@@ -0,0 +1,69 @@
+package com.android.internal.util.aicp;
+
+import android.util.Log;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+
+// convenience import for quick referencing of this method
+
+public final class CMDProcessor {
+    private static final String TAG = "CMDProcessor";
+
+    private CMDProcessor() {
+        // Cannot instantiate this class
+        throw new AssertionError();
+    }
+
+    /* Run a system command with full redirection */
+    public static ChildProcess startSysCmd(String[] cmdarray, String childStdin) {
+        return new ChildProcess(cmdarray, childStdin);
+    }
+
+    public static CommandResult runSysCmd(String[] cmdarray, String childStdin) {
+        ChildProcess proc = startSysCmd(cmdarray, childStdin);
+        proc.waitFinished();
+        return proc.getResult();
+    }
+
+    public static ChildProcess startShellCommand(String cmd) {
+        String[] cmdarray = new String[3];
+        cmdarray[0] = "sh";
+        cmdarray[1] = "-c";
+        cmdarray[2] = cmd;
+        return startSysCmd(cmdarray, null);
+    }
+
+    public static CommandResult runShellCommand(String cmd) {
+        ChildProcess proc = startShellCommand(cmd);
+        proc.waitFinished();
+        return proc.getResult();
+    }
+
+    public static ChildProcess startSuCommand(String cmd) {
+        String[] cmdarray = new String[3];
+        cmdarray[0] = "su";
+        cmdarray[1] = "-c";
+        cmdarray[2] = cmd;
+        return startSysCmd(cmdarray, null);
+    }
+
+    public static CommandResult runSuCommand(String cmd) {
+        ChildProcess proc = startSuCommand(cmd);
+        proc.waitFinished();
+        return proc.getResult();
+    }
+
+    public static boolean canSU() {
+        CommandResult r = runShellCommand("id");
+        StringBuilder out = new StringBuilder(0);
+        out.append(r.getStdout());
+        out.append(" ; ");
+        out.append(r.getStderr());
+        Log.d(TAG, "canSU() su[" + r.getExitValue() + "]: " + out);
+        return r.success();
+    }
+}
diff --git a/core/java/com/android/internal/util/aicp/ChildProcess.java b/core/java/com/android/internal/util/aicp/ChildProcess.java
new file mode 100644
index 9000941..032f6bb
--- /dev/null
+++ b/core/java/com/android/internal/util/aicp/ChildProcess.java
@@ -0,0 +1,149 @@
+package com.android.internal.util.aicp;
+
+import android.os.Environment;
+import android.util.Log;
+
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.io.IOException;
+
+import static java.lang.System.nanoTime;
+
+public class ChildProcess {
+    private String TAG = getClass().getSimpleName();
+
+    private static final int PIPE_SIZE = 1024;
+
+    private class ChildReader extends Thread {
+        InputStream mStream;
+        StringBuffer mBuffer;
+        ChildReader(InputStream is, StringBuffer buf) {
+            mStream = is;
+            mBuffer = buf;
+        }
+        public void run() {
+            byte[] buf = new byte[PIPE_SIZE];
+            try {
+                int len;
+                while ((len = mStream.read(buf)) != -1) {
+                    String s = new String(buf, 0, len);
+                    mBuffer.append(s);
+                }
+            }
+            catch (IOException e) {
+                // Ignore
+            }
+            try {
+                mStream.close();
+            }
+            catch (IOException e) {
+                // Ignore
+            }
+        }
+    }
+    private class ChildWriter extends Thread {
+        OutputStream mStream;
+        String mBuffer;
+        ChildWriter(OutputStream os, String buf) {
+            mStream = os;
+            mBuffer = buf;
+        }
+        public void run() {
+            int off = 0;
+            byte[] buf = mBuffer.getBytes();
+            try {
+                while (off < buf.length) {
+                    int len = Math.min(PIPE_SIZE, buf.length - off);
+                    mStream.write(buf, off, len);
+                    off += len;
+                }
+            }
+            catch (IOException e) {
+                // Ignore
+            }
+            try {
+                mStream.close();
+            }
+            catch (IOException e) {
+                // Ignore
+            }
+        }
+    }
+
+    private long mStartTime;
+    private Process mChildProc;
+    private ChildWriter mChildStdinWriter;
+    private ChildReader mChildStdoutReader;
+    private ChildReader mChildStderrReader;
+    private StringBuffer mChildStdout;
+    private StringBuffer mChildStderr;
+    private int mExitValue;
+    private long mEndTime;
+
+    public ChildProcess(String[] cmdarray, String childStdin) {
+        mStartTime = nanoTime();
+        try {
+            mChildProc = Runtime.getRuntime().exec(cmdarray);
+            if (childStdin != null) {
+                mChildStdinWriter = new ChildWriter(mChildProc.getOutputStream(), childStdin);
+                mChildStdinWriter.start();
+            }
+            mChildStdout = new StringBuffer();
+            mChildStdoutReader = new ChildReader(mChildProc.getInputStream(), mChildStdout);
+            mChildStdoutReader.start();
+            mChildStderr = new StringBuffer();
+            mChildStderrReader = new ChildReader(mChildProc.getErrorStream(), mChildStderr);
+            mChildStderrReader.start();
+        }
+        catch (IOException e) {
+            // XXX: log
+        }
+    }
+
+    public boolean isFinished() {
+        boolean finished = true;
+        if (mChildProc != null) {
+            try {
+                mChildProc.exitValue();
+            }
+            catch (IllegalStateException e) {
+                finished = false;
+            }
+        }
+        return finished;
+    }
+
+    public int waitFinished() {
+        while (mChildProc != null) {
+            try {
+                mExitValue = mChildProc.waitFor();
+                mEndTime = nanoTime();
+                mChildProc = null;
+                mChildStderrReader.join();
+                mChildStderrReader = null;
+                mChildStdoutReader.join();
+                mChildStdoutReader = null;
+                if (mChildStdinWriter != null) {
+                    mChildStdinWriter.join();
+                    mChildStdinWriter = null;
+                }
+            }
+            catch (InterruptedException e) {
+                // Ignore
+            }
+        }
+        return mExitValue;
+    }
+
+    public CommandResult getResult() {
+        if (!isFinished()) {
+            throw new IllegalThreadStateException("Child process running");
+        }
+        return new CommandResult(
+                mStartTime,
+                mExitValue,
+                mChildStdout.toString(),
+                mChildStderr.toString(),
+                mEndTime);
+    }
+}
diff --git a/core/java/com/android/internal/util/aicp/CommandResult.java b/core/java/com/android/internal/util/aicp/CommandResult.java
new file mode 100644
index 9000941..033f6bb
--- /dev/null
+++ b/core/java/com/android/internal/util/aicp/CommandResult.java
@@ -0,0 +1,168 @@
+package com.android.internal.util.aicp;
+
+import android.os.Environment;
+import android.os.Parcel;
+import android.os.Parcelable;
+import android.util.Log;
+
+import java.io.File;
+import java.io.FileWriter;
+import java.io.IOException;
+
+@SuppressWarnings("AccessOfSystemProperties")
+public class CommandResult implements Parcelable {
+    private final String TAG = getClass().getSimpleName();
+    private final long mStartTime;
+    private final int mExitValue;
+    private final String mStdout;
+    private final String mStderr;
+    private final long mEndTime;
+
+    public CommandResult(long startTime,
+                         int exitValue,
+                         String stdout,
+                         String stderr,
+                         long endTime) {
+        mStartTime = startTime;
+        mExitValue = exitValue;
+        mStdout = stdout;
+        mStderr = stderr;
+        mEndTime = endTime;
+
+        Log.d(TAG, "Time to execute: " + (mEndTime - mStartTime) + " ns (nanoseconds)");
+        // this is set last so log from here
+        checkForErrors();
+    }
+
+    // pretty much just forward the constructor from parcelable to our main
+    // loading constructor
+    @SuppressWarnings("CastToConcreteClass")
+    public CommandResult(Parcel inParcel) {
+        this(inParcel.readLong(),
+                inParcel.readInt(),
+                inParcel.readString(),
+                inParcel.readString(),
+                inParcel.readLong());
+    }
+
+    public boolean success() {
+        return (mExitValue == 0);
+    }
+
+    public long getEndTime() {
+        return mEndTime;
+    }
+
+    public String getStderr() {
+        return new String(mStderr);
+    }
+
+    public String getStdout() {
+        return new String(mStdout);
+    }
+
+    public Integer getExitValue() {
+        return mExitValue;
+    }
+
+    public long getStartTime() {
+        return mStartTime;
+    }
+
+    @SuppressWarnings("UnnecessaryExplicitNumericCast")
+    private void checkForErrors() {
+        if (mExitValue != 0
+                || !"".equals(mStderr.trim())) {
+            // don't log the commands that failed
+            // because the cpu was offline
+            boolean skipOfflineCpu =
+                    // if core is off locking fails
+                    mStderr.contains("chmod: /sys/devices/system/cpu/cpu")
+                            // if core is off applying cpu freqs fails
+                            || mStderr.contains(": can't create /sys/devices/system/cpu/cpu");
+            String lineEnding = System.getProperty("line.separator");
+            FileWriter errorWriter = null;
+            try {
+                File errorLogFile = new File(
+                        Environment.getExternalStorageDirectory()
+                        + "/aokp/error.txt");
+                if (!errorLogFile.exists()) {
+                    errorLogFile.createNewFile();
+                }
+                errorWriter = new FileWriter(errorLogFile, true);
+                // only log the cpu state as offline while writing
+                if (skipOfflineCpu) {
+                    errorWriter.write(lineEnding);
+                    errorWriter.write("Attempted to write to an offline cpu core (ignore me).");
+                } else {
+                    errorWriter.write(TAG + " shell error detected!");
+                    errorWriter.write(lineEnding);
+                    errorWriter.write("CommandResult {" + this.toString() + '}');
+                    errorWriter.write(lineEnding);
+                }
+                errorWriter.write(lineEnding);
+            } catch (IOException e) {
+                Log.e(TAG, "Failed to write command result to error file", e);
+            } finally {
+                if (errorWriter != null) {
+                    try {
+                        errorWriter.close();
+                    } catch (IOException ignored) {
+                        // let it go
+                    }
+                }
+            }
+        }
+    }
+
+    // implement parcelable
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel parcel, int i) {
+        parcel.writeLong(mStartTime);
+        parcel.writeInt(mExitValue);
+        parcel.writeString(mStdout);
+        parcel.writeString(mStderr);
+        parcel.writeLong(mEndTime);
+    }
+
+    @Override
+    public String toString() {
+        return "CommandResult{" +
+                ", mStartTime=" + mStartTime +
+                ", mExitValue=" + mExitValue +
+                ", stdout='" + mStdout + "'" +
+                ", stderr='" + mStderr + "'" +
+                ", mEndTime=" + mEndTime +
+                '}';
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (!(o instanceof CommandResult)) return false;
+
+        CommandResult that = (CommandResult) o;
+
+        return (mStartTime == that.mStartTime &&
+                mExitValue == that.mExitValue &&
+                mStdout == that.mStdout &&
+                mStderr == that.mStderr &&
+                mEndTime == that.mEndTime);
+    }
+
+    @Override
+    public int hashCode() {
+        int result = 0;
+        result = 31 * result + (int) (mStartTime ^ (mStartTime >>> 32));
+        result = 31 * result + mExitValue;
+        result = 31 * result + (mStdout != null ? mStdout.hashCode() : 0);
+        result = 31 * result + (mStderr != null ? mStderr.hashCode() : 0);
+        result = 31 * result + (int) (mEndTime ^ (mEndTime >>> 32));
+        return result;
+    }
+}
diff --git a/core/java/com/android/internal/util/aicp/Helpers.java b/core/java/com/android/internal/util/aicp/Helpers.java
new file mode 100644
index 9000941..034f6bb
--- /dev/null
+++ b/core/java/com/android/internal/util/aicp/Helpers.java
@@ -0,0 +1,334 @@
+package com.android.internal.util.aicp;
+
+import android.app.ActivityManagerNative;
+import android.app.IActivityManager;
+import android.content.Context;
+import android.content.pm.PackageManager;
+import android.content.pm.PackageManager.NameNotFoundException;
+import android.net.ConnectivityManager;
+import android.net.NetworkInfo;
+import android.os.RemoteException;
+import android.os.ServiceManager;
+import android.os.SystemProperties;
+import android.util.Log;
+import android.widget.Toast;
+
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.util.Date;
+
+// don't show unavoidable warnings
+@SuppressWarnings({
+        "UnusedDeclaration",
+        "MethodWithMultipleReturnPoints",
+        "ReturnOfNull",
+        "NestedAssignment",
+        "DynamicRegexReplaceableByCompiledPattern",
+        "BreakStatement"})
+public class Helpers {
+    // avoids hardcoding the tag
+    private static final String TAG = Thread.currentThread().getStackTrace()[1].getClassName();
+
+    public Helpers() {
+        // dummy constructor
+    }
+
+    /**
+     * Checks device for SuperUser permission
+     *
+     * @return If SU was granted or denied
+     */
+    @SuppressWarnings("MethodWithMultipleReturnPoints")
+    public static boolean checkSu() {
+        if (!new File("/system/bin/su").exists()
+                && !new File("/system/xbin/su").exists()) {
+            Log.e(TAG, "su binary does not exist!!!");
+            return false; // tell caller to bail...
+        }
+        try {
+            if (CMDProcessor.runSuCommand("ls /data/app-private").success()) {
+                Log.i(TAG, " SU exists and we have permission");
+                return true;
+            } else {
+                Log.i(TAG, " SU exists but we don't have permission");
+                return false;
+            }
+        } catch (NullPointerException e) {
+            Log.e(TAG, "NullPointer throw while looking for su binary", e);
+            return false;
+        }
+    }
+
+    /**
+     * Checks device for network connectivity
+     *
+     * @return If the device has data connectivity
+    */
+    public static boolean isNetworkAvailable(Context context) {
+        boolean state = false;
+        if (context != null) {
+            ConnectivityManager cm =
+                    (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
+            NetworkInfo netInfo = cm.getActiveNetworkInfo();
+            if (netInfo != null && netInfo.isConnected()) {
+                Log.i(TAG, "The device currently has data connectivity");
+                state = true;
+            } else {
+                Log.i(TAG, "The device does not currently have data connectivity");
+                state = false;
+            }
+        }
+        return state;
+    }
+
+    /**
+     * Checks to see if Busybox is installed in "/system/"
+     *
+     * @return If busybox exists
+     */
+    public static boolean checkBusybox() {
+        if (!new File("/system/bin/busybox").exists()
+                && !new File("/system/xbin/busybox").exists()) {
+            Log.e(TAG, "Busybox not in xbin or bin!");
+            return false;
+        }
+        try {
+            if (!CMDProcessor.runSuCommand("busybox mount").success()) {
+                Log.e(TAG, "Busybox is there but it is borked! ");
+                return false;
+            }
+        } catch (NullPointerException e) {
+            Log.e(TAG, "NullpointerException thrown while testing busybox", e);
+            return false;
+        }
+        return true;
+    }
+
+    public static String[] getMounts(CharSequence path) {
+        BufferedReader bufferedReader = null;
+        try {
+            bufferedReader = new BufferedReader(new FileReader("/proc/mounts"), 256);
+            String line;
+            while ((line = bufferedReader.readLine()) != null) {
+                if (line.contains(path)) {
+                    return line.split(" ");
+                }
+            }
+        } catch (FileNotFoundException ignored) {
+            Log.d(TAG, "/proc/mounts does not exist");
+        } catch (IOException ignored) {
+            Log.d(TAG, "Error reading /proc/mounts");
+        } finally {
+            if (bufferedReader != null) {
+                try {
+                    bufferedReader.close();
+                } catch (IOException ignored) {
+                    // ignored
+                }
+            }
+        }
+        return null;
+    }
+
+    public static boolean getMount(String mount) {
+        String[] mounts = getMounts("/system");
+        if (mounts != null && mounts.length >= 3) {
+            String device = mounts[0];
+            String path = mounts[1];
+            String point = mounts[2];
+            String preferredMountCmd = new String("mount -o " + mount + ",remount -t " + point + ' ' + device + ' ' + path);
+            if (CMDProcessor.runSuCommand(preferredMountCmd).success()) {
+                return true;
+            }
+        }
+        String fallbackMountCmd = new String("busybox mount -o remount," + mount + " /system");
+        return CMDProcessor.runSuCommand(fallbackMountCmd).success();
+    }
+
+    public static String readOneLine(String fname) {
+        BufferedReader br = null;
+        String line = null;
+        try {
+            br = new BufferedReader(new FileReader(fname), 1024);
+            line = br.readLine();
+        } catch (FileNotFoundException ignored) {
+            Log.d(TAG, "File was not found! trying via shell...");
+            return readFileViaShell(fname, true);
+        } catch (IOException e) {
+            Log.d(TAG, "IOException while reading system file", e);
+            return readFileViaShell(fname, true);
+        } finally {
+            if (br != null) {
+                try {
+                    br.close();
+                } catch (IOException ignored) {
+                    // failed to close reader
+                }
+            }
+        }
+        return line;
+    }
+
+    public static String readFileViaShell(String filePath, boolean useSu) {
+        String command = new String("cat " + filePath);
+        return useSu ? CMDProcessor.runSuCommand(command).getStdout()
+                : CMDProcessor.runShellCommand(command).getStdout();
+    }
+
+    public static boolean writeOneLine(String filename, String value) {
+        FileWriter fileWriter = null;
+        try {
+            fileWriter = new FileWriter(filename);
+            fileWriter.write(value);
+        } catch (IOException e) {
+            String Error = "Error writing { " + value + " } to file: " + filename;
+            Log.e(TAG, Error, e);
+            return false;
+        } finally {
+            if (fileWriter != null) {
+                try {
+                    fileWriter.close();
+                } catch (IOException ignored) {
+                    // failed to close writer
+                }
+            }
+        }
+        return true;
+    }
+
+    public static String[] getAvailableIOSchedulers() {
+        String[] schedulers = null;
+        String[] aux = readStringArray("/sys/block/mmcblk0/queue/scheduler");
+        if (aux != null) {
+            schedulers = new String[aux.length];
+            for (int i = 0; i < aux.length; i++) {
+                schedulers[i] = aux[i].charAt(0) == '['
+                        ? aux[i].substring(1, aux[i].length() - 1)
+                        : aux[i];
+            }
+        }
+        return schedulers;
+    }
+
+    private static String[] readStringArray(String fname) {
+        String line = readOneLine(fname);
+        if (line != null) {
+            return line.split(" ");
+        }
+        return null;
+    }
+
+    public static String getIOScheduler() {
+        String scheduler = null;
+        String[] schedulers = readStringArray("/sys/block/mmcblk0/queue/scheduler");
+        if (schedulers != null) {
+            for (String s : schedulers) {
+                if (s.charAt(0) == '[') {
+                    scheduler = s.substring(1, s.length() - 1);
+                    break;
+                }
+            }
+        }
+        return scheduler;
+    }
+
+    /**
+     * Long toast message
+     *
+     * @param context Application Context
+     * @param msg Message to send
+     */
+    public static void msgLong(Context context, String msg) {
+        if (context != null && msg != null) {
+            Toast.makeText(context, msg.trim(), Toast.LENGTH_LONG).show();
+        }
+    }
+
+    /**
+     * Short toast message
+     *
+     * @param context Application Context
+     * @param msg Message to send
+     */
+    public static void msgShort(Context context, String msg) {
+        if (context != null && msg != null) {
+            Toast.makeText(context, msg.trim(), Toast.LENGTH_SHORT).show();
+        }
+    }
+
+    /**
+     * Long toast message
+     *
+     * @param context Application Context
+     * @param msg Message to send
+     */
+    public static void sendMsg(Context context, String msg) {
+        if (context != null && msg != null) {
+            msgLong(context, msg);
+        }
+    }
+
+    /**
+     * Return a timestamp
+     *
+     * @param context Application Context
+     */
+    @SuppressWarnings("UnnecessaryFullyQualifiedName")
+    public static String getTimestamp(Context context) {
+        String timestamp = "unknown";
+        Date now = new Date();
+        java.text.DateFormat dateFormat = android.text.format.DateFormat.getDateFormat(context);
+        java.text.DateFormat timeFormat = android.text.format.DateFormat.getTimeFormat(context);
+        if (dateFormat != null && timeFormat != null) {
+            timestamp = dateFormat.format(now) + ' ' + timeFormat.format(now);
+        }
+        return timestamp;
+    }
+
+    public static boolean isPackageInstalled(String packageName, PackageManager pm) {
+        try {
+            String mVersion = pm.getPackageInfo(packageName, 0).versionName;
+            if (mVersion == null) {
+                return false;
+            }
+        } catch (NameNotFoundException notFound) {
+            Log.e(TAG, "Package could not be found!", notFound);
+            return false;
+        }
+        return true;
+    }
+
+    public static void restartSystemUI() {
+        CMDProcessor.startSuCommand("pkill -f com.android.systemui");
+    }
+
+    public static void restartSystem() {
+        try {
+            final IActivityManager am = ActivityManagerNative.asInterface(ServiceManager.checkService("activity"));
+            if (am != null) {
+                am.restart();
+            }
+        }
+        catch (RemoteException e) {
+            Log.e(TAG, "Failed to restart");
+        }
+    }
+
+    public static void setSystemProp(String prop, String val) {
+        CMDProcessor.startSuCommand("setprop " + prop + " " + val);
+    }
+
+    public static String getSystemProp(String prop, String def) {
+        String result = null;
+        try {
+            result = SystemProperties.get(prop, def);
+        } catch (IllegalArgumentException iae) {
+            Log.e(TAG, "Failed to get prop: " + prop);
+        }
+        return result == null ? def : result;
+    }
+}
diff --git a/core/res/res/values/cm_arrays.xml b/core/res/res/values/cm_arrays.xml
index 9000941..035f6bb 100644
--- a/core/res/res/values/cm_arrays.xml
+++ b/core/res/res/values/cm_arrays.xml
@@ -29,6 +29,7 @@
         <item>@string/reboot_soft</item>
         <item>@string/reboot_recovery</item>
         <item>@string/reboot_bootloader</item>
+        <item>@string/reboot_systemui</item>
     </array>
 
     <!-- Do not translate. Defines the shutdown actions passed to the kernel.
@@ -38,6 +39,7 @@
         <item>soft_reboot</item>
         <item>recovery</item>
         <item>bootloader</item>
+        <item>systemui_reboot</item>
      </string-array>
 
     <!-- Do not translate. App ops request strings -->
diff --git a/core/res/res/values/cm_strings.xml b/core/res/res/values/cm_strings.xml
index 9000941..036f6bb 100644
--- a/core/res/res/values/cm_strings.xml
+++ b/core/res/res/values/cm_strings.xml
@@ -42,6 +42,8 @@
     <string name="reboot_download">Download</string>
     <!-- Button to soft restart the device, within the Restart Options dialog -->
     <string name="reboot_soft">Soft restart</string>
+    <!-- Button to soft reboot the device, within the Reboot Options dialog -->
+    <string name="reboot_systemui">Restart SystemUI</string>
 
     <!-- Title of dialog to confirm restarting. -->
     <string name="reboot_title">Restart</string>
diff --git a/services/core/java/com/android/server/power/ShutdownThread.java b/services/core/java/com/android/server/power/ShutdownThread.java
index 9000941..037f6bb 100644
--- a/services/core/java/com/android/server/power/ShutdownThread.java
+++ b/services/core/java/com/android/server/power/ShutdownThread.java
@@ -69,6 +69,8 @@
 
 import java.lang.reflect.Method;
 
+import com.android.internal.util.aicp.Helpers;
+
 public final class ShutdownThread extends Thread {
     // constants
     private static final String TAG = "ShutdownThread";
@@ -86,6 +88,7 @@
     private static final int MOUNT_SERVICE_STOP_PERCENT = 20;
 
     private static final String SOFT_REBOOT = "soft_reboot";
+    private static final String SYSTEMUI_REBOOT = "systemui_reboot";
 
     // length of vibration before shutting down
     private static final int SHUTDOWN_VIBRATE_MS = 500;
@@ -236,7 +239,11 @@ public void onClick(DialogInterface dialog, int which) {
                                 if (selected != ListView.INVALID_POSITION) {
                                     String actions[] = context.getResources().getStringArray(
                                             com.android.internal.R.array.shutdown_reboot_actions);
-                                    if (selected >= 0 && selected < actions.length) {
+                                    if (actions[selected].equals(SYSTEMUI_REBOOT)) {
+                                        mReason = actions[selected];
+                                        doSystemUIReboot();
+                                        return;
+                                    } else if (selected >= 0 && selected < actions.length) {
                                         mReason = actions[selected];
                                         if (actions[selected].equals(SOFT_REBOOT)) {
                                             doSoftReboot();
@@ -275,6 +282,10 @@ private static void doSoftReboot() {
         }
     }
 
+    private static void doSystemUIReboot() {
+        Helpers.restartSystemUI();
+    }
+
     private static class CloseDialogReceiver extends BroadcastReceiver
             implements DialogInterface.OnDismissListener {
         private Context mContext;
diff --git a/core/res/res/values-ru/cm_strings.xml b/core/res/res/values-ru/cm_strings.xml
index 9000941..036f6bb 100644
--- a/core/res/res/values-ru/cm_strings.xml
+++ b/core/res/res/values-ru/cm_strings.xml
@@ -38,6 +38,8 @@
   <string name="reboot_download">Режим обновления ПО</string>
   <!-- Button to soft restart the device, within the Restart Options dialog -->
   <string name="reboot_soft">Перезапуск интерфейса</string>
+  <!-- Button to soft reboot the device, within the Reboot Options dialog -->
+  <string name="reboot_systemui">Перезапуск SystemUI</string>
   <!-- Title of dialog to confirm restarting. -->
   <string name="reboot_title">Перезапуск</string>
   <!-- Restart Confirmation Dialog.  When the user chooses to restart the device, there will
