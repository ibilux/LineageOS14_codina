Subject: [PATCH] Increase ZipFile read buffers size to 64k

Fixes performance regression introduced in Android N.
Increased size of buffer for Inflater in ZipFile.getInputStream from 8k to 64k.
Replaced temp stack in bufferZipFile_read with GetByteArrayElements.

diff --git a/benchmarks/src/benchmarks/ZipFileReadBenchmark.java b/benchmarks/src/benchmarks/ZipFileReadBenchmark.java
new file mode 100644
index 000000000..f6125a613
--- /dev/null
+++ b/benchmarks/src/benchmarks/ZipFileReadBenchmark.java
@@ -0,0 +1,90 @@
+/*
+ * Copyright (C) 2017 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License
+ */
+
+package benchmarks;
+
+import com.google.caliper.BeforeExperiment;
+import com.google.caliper.Param;
+import java.io.File;
+import java.io.InputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.util.Enumeration;
+import java.util.Random;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipFile;
+import java.util.zip.ZipOutputStream;
+
+
+public class ZipFileReadBenchmark {
+    private File file;
+    @Param({"1024", "16384", "65536"}) int readBufferSize;
+
+    @BeforeExperiment
+    protected void setUp() throws Exception {
+        System.setProperty("java.io.tmpdir", "/data/local/tmp");
+        file = File.createTempFile(getClass().getName(), ".zip");
+        writeEntries(new ZipOutputStream(new FileOutputStream(file)), 2, 1024*1024);
+        ZipFile zipFile = new ZipFile(file);
+        for (Enumeration<? extends ZipEntry> e = zipFile.entries(); e.hasMoreElements(); ) {
+            ZipEntry zipEntry = e.nextElement();
+        }
+        zipFile.close();
+    }
+
+    /**
+     * Compresses the given number of files, each of the given size, into a .zip archive.
+     */
+    protected void writeEntries(ZipOutputStream out, int entryCount, long entrySize)
+            throws IOException {
+        byte[] writeBuffer = new byte[8192];
+        Random random = new Random();
+        try {
+            for (int entry = 0; entry < entryCount; ++entry) {
+                ZipEntry ze = new ZipEntry(Integer.toHexString(entry));
+                ze.setSize(entrySize);
+                out.putNextEntry(ze);
+
+                for (long i = 0; i < entrySize; i += writeBuffer.length) {
+                    random.nextBytes(writeBuffer);
+                    int byteCount = (int) Math.min(writeBuffer.length, entrySize - i);
+                    out.write(writeBuffer, 0, byteCount);
+                }
+
+                out.closeEntry();
+            }
+        } finally {
+            out.close();
+        }
+    }
+
+    public void timeZipFileRead(int reps) throws Exception {
+        byte readBuffer[] = new byte[readBufferSize];
+        for (int i = 0; i < reps; ++i) {
+            ZipFile zipFile = new ZipFile(file);
+            for (Enumeration<? extends ZipEntry> e = zipFile.entries(); e.hasMoreElements(); ) {
+                ZipEntry zipEntry = e.nextElement();
+                InputStream is = zipFile.getInputStream(zipEntry);
+                while (true) {
+                    if (is.read(readBuffer, 0, readBuffer.length) < 0) {
+                        break;
+                    }
+                }
+            }
+            zipFile.close();
+        }
+    }
+}
diff --git a/luni/src/test/java/libcore/java/util/zip/AbstractZipFileTest.java b/luni/src/test/java/libcore/java/util/zip/AbstractZipFileTest.java
index c4f41f687..3d5440e30 100644
--- a/luni/src/test/java/libcore/java/util/zip/AbstractZipFileTest.java
+++ b/luni/src/test/java/libcore/java/util/zip/AbstractZipFileTest.java
@@ -545,4 +545,85 @@ public void testArchivesWithRelativePaths() throws IOException {
             assertTrue(entryNamesFromFile.contains(entryName));
         }
     }
+
+    // http://b/65491407
+    public void testReadMoreThan8kInOneRead() throws IOException {
+        // Create a zip file with 1mb entry
+        final File f = createTemporaryZipFile();
+        writeEntries(createZipOutputStream(f), 1, 1024 * 1024, true /* setEntrySize */);
+
+        // Create a ~64kb read buffer (-32 bytes for a slack, inflater wont fill it completly)
+        byte[] readBuffer = new byte[1024 * 64 - 32];
+
+        // Read the data to read buffer
+        ZipFile zipFile = new ZipFile(f);
+        InputStream is = zipFile.getInputStream(zipFile.entries().nextElement());
+        int read = is.read(readBuffer, 0, readBuffer.length);
+
+        // Assert that whole buffer been filled. Due to openJdk choice of buffer size, read
+        // never returned more than 8k of data.
+        assertEquals(readBuffer.length, read);
+        is.close();
+        zipFile.close();
+    }
+
+    // http://b/65491407
+    public void testReadWithOffset() throws IOException {
+        // Create a zip file with 1mb entry
+        final File f = createTemporaryZipFile();
+        writeEntries(createZipOutputStream(f), 1, 1024 * 1024, true /* setEntrySize */);
+
+        int bufferSize = 128;
+        byte[] readBuffer = new byte[bufferSize];
+
+        // Read the data to read buffer
+        ZipFile zipFile = new ZipFile(f);
+        InputStream is = zipFile.getInputStream(zipFile.entries().nextElement());
+
+        // Read data (Random bytes sting) to last 32 bit
+        int read = is.read(readBuffer, bufferSize - 32, 32);
+
+        // Check if buffer looks like expected
+        assertEquals(32, read);
+        for (int i = 0; i < bufferSize - 32; i++) {
+          assertEquals(0, readBuffer[i]);
+        }
+
+        is.close();
+        zipFile.close();
+    }
+
+    // http://b/65491407
+    public void testReadWithOffsetInvalid() throws IOException {
+        // Create a zip file with 1mb entry
+        final File f = createTemporaryZipFile();
+        writeEntries(createZipOutputStream(f), 1, 1024 * 1024, true /* setEntrySize */);
+
+        int bufferSize = 128;
+        byte[] readBuffer = new byte[bufferSize];
+
+        // Read the data to read buffer
+        ZipFile zipFile = new ZipFile(f);
+        InputStream is = zipFile.getInputStream(zipFile.entries().nextElement());
+
+        try {
+          is.read(readBuffer, bufferSize - 32, 33);
+          fail();
+        } catch(IndexOutOfBoundsException expect) {}
+        try {
+          is.read(readBuffer, -1, 32);
+          fail();
+        } catch(IndexOutOfBoundsException expect) {}
+        try {
+          is.read(readBuffer, 32, -1);
+          fail();
+        } catch(IndexOutOfBoundsException expect) {}
+        try {
+          is.read(readBuffer, bufferSize, 1);
+          fail();
+        } catch(IndexOutOfBoundsException expect) {}
+
+        is.close();
+        zipFile.close();
+    }
 }
diff --git a/ojluni/src/main/java/java/util/zip/ZipFile.java b/ojluni/src/main/java/java/util/zip/ZipFile.java
index 1ff8cb3c9..bc2e6cf38 100644
--- a/ojluni/src/main/java/java/util/zip/ZipFile.java
+++ b/ojluni/src/main/java/java/util/zip/ZipFile.java
@@ -381,7 +381,9 @@ public InputStream getInputStream(ZipEntry entry) throws IOException {
             case DEFLATED:
                 // MORE: Compute good size for inflater stream:
                 long size = getEntrySize(jzentry) + 2; // Inflater likes a bit of slack
-                if (size > 65536) size = 8192;
+                // Android-changed: Use 64k buffer size, performs better than 8k.
+                // if (size > 65536) size = 8192;
+                if (size > 65536) size = 65536;
                 if (size <= 0) size = 4096;
                 Inflater inf = getInflater();
                 InputStream is =
diff --git a/ojluni/src/main/native/java_util_zip_ZipFile.c b/ojluni/src/main/native/java_util_zip_ZipFile.c
index 8444c42d9..daf5d8eff 100644
--- a/ojluni/src/main/native/java_util_zip_ZipFile.c
+++ b/ojluni/src/main/native/java_util_zip_ZipFile.c
@@ -311,21 +311,22 @@ ZipFile_read(JNIEnv *env, jclass cls, jlong zfile,
     jzfile *zip = jlong_to_ptr(zfile);
     char *msg;
 
-#define BUFSIZE 8192
-    /* copy via tmp stack buffer: */
-    jbyte buf[BUFSIZE];
-
-    if (len > BUFSIZE) {
-        len = BUFSIZE;
+    // BEGIN Android-changed: Removed tmp stack buffer.
+    long long length = (long long)(*env)->GetArrayLength(env, bytes);
+    if (off < 0 || len < 0 || off + len > length) {
+        char errmsg[128];
+        snprintf(errmsg, sizeof(errmsg), "len: %d, off: %d are not valid for array sized %lld\n",
+                 len, off, length);
+        JNU_ThrowArrayIndexOutOfBoundsException(env, errmsg);
+        return -1;
     }
 
+    jbyte *buf = (*env)->GetByteArrayElements(env, bytes, NULL);
     ZIP_Lock(zip);
-    len = ZIP_Read(zip, jlong_to_ptr(zentry), pos, buf, len);
+    len = ZIP_Read(zip, jlong_to_ptr(zentry), pos, buf + off, len);
     msg = zip->msg;
     ZIP_Unlock(zip);
-    if (len != -1) {
-        (*env)->SetByteArrayRegion(env, bytes, off, len, buf);
-    }
+    (*env)->ReleaseByteArrayElements(env, bytes, buf, 0);
 
     if (len == -1) {
         if (msg != 0) {
@@ -337,6 +338,7 @@ ZipFile_read(JNIEnv *env, jclass cls, jlong zfile,
             JNU_ThrowIOExceptionWithLastError(env, errmsg);
         }
     }
+    // END Android-changed: Removed tmp stack buffer.
 
     return len;
 }
