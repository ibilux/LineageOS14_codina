Subject: [PATCH] frameworks/base: Fix ContentService JNI leaks

 - A list of ObserverCall(s) is created by ContentService as
  it notifies changes to the registered content observers.
  Clear observer after use.

 - If same Observer and same URI are registered, the callback
  functions are called multiple times when data identified by
  a given content URI changes. It makes system slow and it
  cause ANR sometimes. And when run
  unregisterContentObserver(), just one deleted but others
  are remained in mObservers. So add prevent code to avoid
  to duplicated registration of Observers

diff --git a/services/core/java/com/android/server/content/ContentService.java b/services/core/java/com/android/server/content/ContentService.java
index 6e1c21eea15..d54cc82c363 100644
--- a/services/core/java/com/android/server/content/ContentService.java
+++ b/services/core/java/com/android/server/content/ContentService.java
@@ -69,6 +69,7 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Comparator;
+import java.util.Iterator;
 import java.util.List;
 
 /**
@@ -309,8 +310,6 @@ public void registerContentObserver(Uri uri, boolean notifyForDescendants,
         synchronized (mRootNode) {
             mRootNode.addObserverLocked(uri, observer, notifyForDescendants, mRootNode,
                     uid, pid, userHandle);
-            if (false) Log.v(TAG, "Registered observer " + observer + " at " + uri +
-                    " with notifyForDescendants " + notifyForDescendants);
         }
     }
 
@@ -367,8 +366,9 @@ public void notifyChange(Uri uri, IContentObserver observer,
         // This makes it so that future permission checks will be in the context of this
         // process rather than the caller's process. We will restore this before returning.
         long identityToken = clearCallingIdentity();
+        ArrayList<ObserverCall> calls = null;
         try {
-            ArrayList<ObserverCall> calls = new ArrayList<ObserverCall>();
+            calls = new ArrayList<ObserverCall>();
             synchronized (mRootNode) {
                 mRootNode.collectObserversLocked(uri, 0, observer, observerWantsSelfNotifications,
                         flags, userHandle, calls);
@@ -411,6 +411,9 @@ public void notifyChange(Uri uri, IContentObserver observer,
                 invalidateCacheLocked(userHandle, providerPackageName, uri);
             }
         } finally {
+            if (calls != null) {
+                calls.clear();
+            }
             restoreCallingIdentity(identityToken);
         }
     }
@@ -1294,8 +1297,18 @@ private void addObserverLocked(Uri uri, int index, IContentObserver observer,
                                        int uid, int pid, int userHandle) {
             // If this is the leaf node add the observer
             if (index == countUriSegments(uri)) {
+                Iterator<ObserverEntry> iter = mObservers.iterator();
+                while(iter.hasNext()) {
+                    ObserverEntry next = iter.next();
+                    if(next.observer.asBinder() == observer.asBinder()) {
+                        Log.w(TAG, "Observer " + observer + " is already registered.");
+                         return;
+                    }
+                }
                 mObservers.add(new ObserverEntry(observer, notifyForDescendants, observersLock,
                         uid, pid, userHandle));
+                if (false) Log.v(TAG, "Registered observer " + observer + " at " + uri +
+                        " with notifyForDescendants " + notifyForDescendants);
                 return;
             }
 
