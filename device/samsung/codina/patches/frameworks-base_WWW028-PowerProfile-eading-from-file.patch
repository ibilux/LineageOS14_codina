 PowerProfile: allow reading from a file instead of resource

Unified builds may require reading different power profile for each variants.

Allow reading power profile from a file instead of resource by querying
ro.power_profile prop.

Device maintainers can opt-in by using the init extension.

diff --git a/core/java/com/android/internal/os/PowerProfile.java b/core/java/com/android/internal/os/PowerProfile.java
index d217474..a490da5 100644
--- a/core/java/com/android/internal/os/PowerProfile.java
+++ b/core/java/com/android/internal/os/PowerProfile.java
@@ -20,8 +20,6 @@
 import android.content.Context;
 import android.content.res.Resources;
 import android.content.res.XmlResourceParser;
-import android.os.SystemProperties;
-import android.util.Slog;
 
 import com.android.internal.util.XmlUtils;
 
@@ -38,7 +36,6 @@
  * [hidden]
  */
 public class PowerProfile {
-    private static final String TAG = "PowerProfile";
 
     /**
      * No power consumption, or accounted for elsewhere.
@@ -213,7 +210,7 @@
     }
 
     private void readPowerValuesFromXml(Context context) {
-        int id = getPowerProfileResId(context);
+        int id = com.android.internal.R.xml.power_profile;
         final Resources resources = context.getResources();
         XmlResourceParser parser = resources.getXml(id);
         boolean parsingArray = false;
@@ -367,28 +364,6 @@
         return 0;
     }
 
-    private int getPowerProfileResId(final Context context) {
-        int id = com.android.internal.R.xml.power_profile;
-        /*
-         * If ro.power_profile.override is set, use it to override the default.
-         * This is used for devices, which need to dynamically define the power profile.
-         */
-        String powerProfileOverride = SystemProperties.get("ro.power_profile.override");
-        if (!powerProfileOverride.isEmpty()) {
-            int tmpId = context.getResources().getIdentifier(powerProfileOverride, "xml",
-                    "android");
-            if (tmpId > 0) {
-                Slog.i(TAG, "getPowerProfileResId: using power profile \""
-                        + powerProfileOverride + "\"");
-                id = tmpId;
-            } else {
-                Slog.e(TAG, "getPowerProfileResId: could not retrieve power profile \""
-                        + powerProfileOverride + "\", using default instead");
-            }
-        }
-        return id;
-    }
-
     /**
      * Returns the average current in mA consumed by the subsystem, or the given
      * default value if the subsystem has no recorded value.
diff --git a/core/java/com/android/internal/os/PowerProfile.java b/core/java/com/android/internal/os/PowerProfile.java
index 6000fb5..013e7dd 100644
--- a/core/java/com/android/internal/os/PowerProfile.java
+++ b/core/java/com/android/internal/os/PowerProfile.java
@@ -20,12 +20,18 @@
 import android.content.Context;
 import android.content.res.Resources;
 import android.content.res.XmlResourceParser;
+import android.os.SystemProperties;
+import android.util.Xml;
 
 import com.android.internal.util.XmlUtils;
 
 import org.xmlpull.v1.XmlPullParser;
 import org.xmlpull.v1.XmlPullParserException;
 
+import libcore.io.IoUtils;
+
+import java.io.File;
+import java.io.FileReader;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -210,14 +216,27 @@ public PowerProfile(Context context) {
     }
 
     private void readPowerValuesFromXml(Context context) {
-        int id = com.android.internal.R.xml.power_profile;
+        final String profilePath = SystemProperties.get("ro.power_profile",
+                                           "/system/etc/power_profile.xml");
         final Resources resources = context.getResources();
-        XmlResourceParser parser = resources.getXml(id);
+        XmlResourceParser resParser = null;
+        XmlPullParser parser = null;
         boolean parsingArray = false;
         ArrayList<Double> array = new ArrayList<Double>();
         String arrayName = null;
+        FileReader profileReader = null;
 
         try {
+            if (new File(profilePath).exists()) {
+                profileReader = new FileReader(profilePath);
+                parser = Xml.newPullParser();
+                parser.setInput(profileReader);
+            } else {
+                int id = com.android.internal.R.xml.power_profile;
+                resParser = resources.getXml(id);
+                parser = resParser;
+            }
+
             XmlUtils.beginDocument(parser, TAG_DEVICE);
 
             while (true) {
@@ -261,7 +280,10 @@ private void readPowerValuesFromXml(Context context) {
         } catch (IOException e) {
             throw new RuntimeException(e);
         } finally {
-            parser.close();
+            if (resParser != null) {
+                resParser.close();
+            }
+            IoUtils.closeQuietly(profileReader);
         }
 
         // Now collect other config variables.
