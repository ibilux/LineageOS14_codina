Subject: [PATCH] system_server crash in ArrayMap.

Instead of crashing, log a wtf and recover.

diff --git a/core/java/android/util/ArrayMap.java b/core/java/android/util/ArrayMap.java
index 92a5803..3b82593 100644
--- a/core/java/android/util/ArrayMap.java
+++ b/core/java/android/util/ArrayMap.java
@@ -170,28 +170,46 @@
             synchronized (ArrayMap.class) {
                 if (mTwiceBaseCache != null) {
                     final Object[] array = mTwiceBaseCache;
-                    mArray = array;
-                    mTwiceBaseCache = (Object[])array[0];
-                    mHashes = (int[])array[1];
-                    array[0] = array[1] = null;
-                    mTwiceBaseCacheSize--;
-                    if (DEBUG) Log.d(TAG, "Retrieving 2x cache " + mHashes
-                            + " now have " + mTwiceBaseCacheSize + " entries");
-                    return;
+                    try {
+                        mArray = array;
+                        mTwiceBaseCache = (Object[])array[0];
+                        mHashes = (int[])array[1];
+                        array[0] = array[1] = null;
+                        mTwiceBaseCacheSize--;
+                        if (DEBUG) Log.d(TAG, "Retrieving 2x cache " + mHashes
+                                + " now have " + mTwiceBaseCacheSize + " entries");
+                        return;
+                    } catch (ClassCastException e) {
+                    }
+                    // Whoops!  Someone trampled the array (probably due to not protecting
+                    // their access with a lock).  Our cache is corrupt; report and give up.
+                    Slog.wtf(TAG, "Found corrupt ArrayMap cache: [0]=" + array[0]
+                            + " [1]=" + array[1]);
+                    mTwiceBaseCache = null;
+                    mTwiceBaseCacheSize = 0;
                 }
             }
         } else if (size == BASE_SIZE) {
             synchronized (ArrayMap.class) {
                 if (mBaseCache != null) {
                     final Object[] array = mBaseCache;
-                    mArray = array;
-                    mBaseCache = (Object[])array[0];
-                    mHashes = (int[])array[1];
-                    array[0] = array[1] = null;
-                    mBaseCacheSize--;
-                    if (DEBUG) Log.d(TAG, "Retrieving 1x cache " + mHashes
-                            + " now have " + mBaseCacheSize + " entries");
-                    return;
+                    try {
+                        mArray = array;
+                        mBaseCache = (Object[])array[0];
+                        mHashes = (int[])array[1];
+                        array[0] = array[1] = null;
+                        mBaseCacheSize--;
+                        if (DEBUG) Log.d(TAG, "Retrieving 1x cache " + mHashes
+                                + " now have " + mBaseCacheSize + " entries");
+                        return;
+                    } catch (ClassCastException e) {
+                    }
+                    // Whoops!  Someone trampled the array (probably due to not protecting
+                    // their access with a lock).  Our cache is corrupt; report and give up.
+                    Slog.wtf(TAG, "Found corrupt ArrayMap cache: [0]=" + array[0]
+                            + " [1]=" + array[1]);
+                    mBaseCache = null;
+                    mBaseCacheSize = 0;
                 }
             }
         }
diff --git a/tests/ActivityTests/src/com/google/android/test/activity/ArrayMapTests.java b/tests/ActivityTests/src/com/google/android/test/activity/ArrayMapTests.java
index 4ad6dc7..bca4d20 100644
--- a/tests/ActivityTests/src/com/google/android/test/activity/ArrayMapTests.java
+++ b/tests/ActivityTests/src/com/google/android/test/activity/ArrayMapTests.java
@@ -26,6 +26,9 @@
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicBoolean;
 
 public class ArrayMapTests {
     static final int OP_ADD = 1;
@@ -108,6 +111,44 @@
         }
     }
 
+    static class ArrayMapStressLoop implements Runnable {
+        ArrayMap<String, String> mMap;
+        AtomicBoolean mRunning;
+        CountDownLatch mStopNotify;
+        boolean mHasClassCastException;
+
+        ArrayMapStressLoop(ArrayMap<String, String> map, AtomicBoolean running,
+                CountDownLatch stopNotify) {
+            mMap = map;
+            mRunning = running;
+            mStopNotify = stopNotify;
+            mHasClassCastException = false;
+        }
+
+        boolean hasClassCastException() {
+            return mHasClassCastException;
+        }
+
+        @Override
+        public void run() {
+            while (mRunning.get()) {
+                try {
+                    if (mMap.size() > 10) {
+                        mMap.clear();
+                    }
+                    mMap.put(Long.toString(System.currentTimeMillis()), "");
+                } catch (ClassCastException e) {
+                    mHasClassCastException = true;
+                    mRunning.set(false);
+                } catch (Exception ignore) {
+                    // IndexOutOfBoundsException or NullPointerException
+                    // they are all multi-thread issues, just ignore them.
+                }
+            }
+            mStopNotify.countDown();
+        }
+    }
+
     private static boolean compare(Object v1, Object v2) {
         if (v1 == null) {
             return v2 == null;
@@ -446,6 +487,10 @@
             return;
         }
 
+        if (!testClassCastException()) {
+            return;
+        }
+
         Log.e("test", "Test successful; printing final map.");
         dump(hashMap, arrayMap);
 
@@ -529,4 +574,39 @@
 
         return true;
     }
+
+    private static boolean testClassCastException() {
+        ArrayMap<String, String> shared = new ArrayMap(); // ArrayMap for multi-thread
+        ArrayMap<String, String> single = new ArrayMap(); // ArrayMap for single thread
+        AtomicBoolean running = new AtomicBoolean(true);  // running flag
+
+        CountDownLatch countLatch = new CountDownLatch(3); // 3 threads
+        ArrayMapStressLoop sharedLoop1 = new ArrayMapStressLoop(shared,
+                running, countLatch);
+        ArrayMapStressLoop sharedLoop2 = new ArrayMapStressLoop(shared,
+                running, countLatch);
+        ArrayMapStressLoop singleLoop  = new ArrayMapStressLoop(single,
+                running, countLatch);
+
+        new Thread(sharedLoop1).start();
+        new Thread(sharedLoop2).start();
+        new Thread(singleLoop).start();
+
+        // Multi-thread Stress test for 500ms
+        try {
+            countLatch.await(500, TimeUnit.MILLISECONDS);
+        } catch (InterruptedException e) {
+            // do nothing
+        }
+
+        running.set(false); // stop all threads
+        if (sharedLoop1.hasClassCastException() || sharedLoop2.hasClassCastException() ||
+                singleLoop.hasClassCastException()) {
+            Log.e("test", "testClassCastException failed. "
+                    + "Application using ArrayMap may crash after this failed.");
+            return false;
+        }
+
+        return true;
+    }
 }
