Subject: [PATCH] [1/2] base: enable power save config of system apps

allow forcing gms to follow doze restrictions
add API to change the system defined app whitelist

diff --git a/core/java/android/os/IDeviceIdleController.aidl b/core/java/android/os/IDeviceIdleController.aidl
index 9cd7dfa..0ed52bb 100644
--- a/core/java/android/os/IDeviceIdleController.aidl
+++ b/core/java/android/os/IDeviceIdleController.aidl
@@ -42,4 +42,7 @@
     void unregisterMaintenanceActivityListener(IMaintenanceActivityListener listener);
     int getIdleStateDetailed();
     int getLightIdleStateDetailed();
+    String[] getSystemPowerWhitelistOriginal();
+    void addSystemPowerSaveWhitelistApp(String name);
+    void removeSystemPowerSaveWhitelistApp(String name);
 }
diff --git a/services/core/java/com/android/server/DeviceIdleController.java b/services/core/java/com/android/server/DeviceIdleController.java
index b169573..3e73fca 100644
--- a/services/core/java/com/android/server/DeviceIdleController.java
+++ b/services/core/java/com/android/server/DeviceIdleController.java
@@ -240,6 +240,12 @@
     private final ArrayMap<String, Integer> mPowerSaveWhitelistApps = new ArrayMap<>();
 
     /**
+     * Original unchanged package names the system has white-listed to opt out of power save
+     * restrictions for all modes.
+     */
+    private final ArrayMap<String, Integer> mPowerSaveWhitelistAppsOriginal = new ArrayMap<>();
+
+    /**
      * Package names the user has white-listed to opt out of power save restrictions.
      */
     private final ArrayMap<String, Integer> mPowerSaveWhitelistUserApps = new ArrayMap<>();
@@ -1262,6 +1268,32 @@
                 FileDescriptor err, String[] args, ResultReceiver resultReceiver) {
             (new Shell()).exec(this, in, out, err, args, resultReceiver);
         }
+
+        @Override public void addSystemPowerSaveWhitelistApp(String name) {
+            getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,
+                    null);
+            long ident = Binder.clearCallingIdentity();
+            try {
+                addSystemPowerSaveWhitelistAppInternal(name);
+            } finally {
+                Binder.restoreCallingIdentity(ident);
+            }
+        }
+
+        @Override public void removeSystemPowerSaveWhitelistApp(String name) {
+            getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,
+                    null);
+            long ident = Binder.clearCallingIdentity();
+            try {
+                removeSystemPowerSaveWhitelistAppInternal(name);
+            } finally {
+                Binder.restoreCallingIdentity(ident);
+            }
+        }
+
+        @Override public String[] getSystemPowerWhitelistOriginal() {
+            return getSystemPowerWhitelistOriginalInternal();
+        }
     }
 
     public final class LocalService {
@@ -1346,6 +1378,7 @@
                     mPowerSaveWhitelistAppsExceptIdle.put(ai.packageName, appid);
                     mPowerSaveWhitelistSystemAppIdsExceptIdle.put(appid, true);
                     mPowerSaveWhitelistApps.put(ai.packageName, appid);
+                    mPowerSaveWhitelistAppsOriginal.put(ai.packageName, appid);
                     mPowerSaveWhitelistSystemAppIds.put(appid, true);
                 } catch (PackageManager.NameNotFoundException e) {
                 }
@@ -1484,6 +1517,35 @@
         return false;
     }
 
+    public boolean addSystemPowerSaveWhitelistAppInternal(String name) {
+        synchronized (this) {
+            try {
+                ApplicationInfo ai = getContext().getPackageManager().getApplicationInfo(name,
+                        PackageManager.MATCH_UNINSTALLED_PACKAGES);
+                if (mPowerSaveWhitelistApps.put(name, UserHandle.getAppId(ai.uid)) == null) {
+                    reportPowerSaveWhitelistChangedLocked();
+                    updateWhitelistAppIdsLocked();
+                    writeConfigFileLocked();
+                }
+                return true;
+            } catch (PackageManager.NameNotFoundException e) {
+                return false;
+            }
+        }
+    }
+
+    public boolean removeSystemPowerSaveWhitelistAppInternal(String name) {
+        synchronized (this) {
+            if (mPowerSaveWhitelistApps.remove(name) != null) {
+                reportPowerSaveWhitelistChangedLocked();
+                updateWhitelistAppIdsLocked();
+                writeConfigFileLocked();
+                return true;
+            }
+        }
+        return false;
+    }
+
     public boolean getPowerSaveWhitelistAppInternal(String name) {
         synchronized (this) {
             return mPowerSaveWhitelistUserApps.containsKey(name);
@@ -1507,6 +1569,17 @@
             String[] apps = new String[size];
             for (int i = 0; i < size; i++) {
                 apps[i] = mPowerSaveWhitelistApps.keyAt(i);
+            }
+            return apps;
+        }
+    }
+
+    public String[] getSystemPowerWhitelistOriginalInternal() {
+        synchronized (this) {
+            int size = mPowerSaveWhitelistAppsOriginal.size();
+            String[] apps = new String[size];
+            for (int i = 0; i < size; i++) {
+                apps[i] = mPowerSaveWhitelistAppsOriginal.keyAt(i);
             }
             return apps;
         }
@@ -2433,6 +2506,21 @@
                         } catch (PackageManager.NameNotFoundException e) {
                         }
                     }
+                } else if (tagName.equals("wls")) {
+                    if (mPowerSaveWhitelistApps.size() != 0) {
+                        mPowerSaveWhitelistApps.clear();
+                    }
+                    String name = parser.getAttributeValue(null, "n");
+                    // using special placeholder empty just clear the whitelist list for system apps
+                    if (name != null && !name.equals("empty")) {
+                        try {
+                            ApplicationInfo ai = pm.getApplicationInfo(name,
+                                    PackageManager.MATCH_UNINSTALLED_PACKAGES);
+                            mPowerSaveWhitelistApps.put(ai.packageName,
+                                    UserHandle.getAppId(ai.uid));
+                        } catch (PackageManager.NameNotFoundException e) {
+                        }
+                    }
                 } else {
                     Slog.w(TAG, "Unknown element under <config>: "
                             + parser.getName());
@@ -2497,6 +2585,22 @@
             out.attribute(null, "n", name);
             out.endTag(null, "wl");
         }
+        if (mPowerSaveWhitelistApps.size() == 0) {
+            // placeholder entry to indicate that ALL system apps are removed from the whitelist
+            out.startTag(null, "wls");
+            out.attribute(null, "n", "empty");
+            out.endTag(null, "wls");
+        } else {
+            // no need to store anything if whitelist is the same as initially
+            if (!mPowerSaveWhitelistApps.equals(mPowerSaveWhitelistAppsOriginal)) {
+                for (int i=0; i<mPowerSaveWhitelistApps.size(); i++) {
+                    String name = mPowerSaveWhitelistApps.keyAt(i);
+                    out.startTag(null, "wls");
+                    out.attribute(null, "n", name);
+                    out.endTag(null, "wls");
+                }
+            }
+        }
         out.endTag(null, "config");
         out.endDocument();
     }
