Subject: [PATCH] Custom QS rows/columns [1/3]

diff --git a/core/res/res/values/cr_config.xml b/core/res/res/values/cr_config.xml
new file mode 100644
index 00000000000..babbee63463
--- /dev/null
+++ b/core/res/res/values/cr_config.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+/*
+** Copyright 2009, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License");
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+-->
+
+<!-- These resources are around just to allow their values to be customized
+     for different hardware and product builds.  Do not translate.
+
+     NOTE: The naming convention is "config_camelCaseValue". Some legacy
+     entries do not follow the convention, but all new entries should. -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <!-- Quick settings tiles columns and rows config -->
+    <integer name="config_qs_num_rows_landscape_default">2</integer>
+</resources>
diff --git a/core/res/res/values/cr_symbols.xml b/core/res/res/values/cr_symbols.xml
new file mode 100644
index 00000000000..d90c473166e
--- /dev/null
+++ b/core/res/res/values/cr_symbols.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2012-2015 The CyanogenMod Project
+     Copyright (c) 2013, The Linux Foundation. All rights reserved.
+                   2017  The LineageOS Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<resources>
+    <!-- Quick settings tiles columns and rows config -->
+    <java-symbol type="integer" name="config_qs_num_rows_landscape_default"/>
+</resources>
diff --git a/packages/SystemUI/src/com/android/systemui/qs/PagedTileLayout.java b/packages/SystemUI/src/com/android/systemui/qs/PagedTileLayout.java
index 1c242e9b609..4f1477da8ba 100644
--- a/packages/SystemUI/src/com/android/systemui/qs/PagedTileLayout.java
+++ b/packages/SystemUI/src/com/android/systemui/qs/PagedTileLayout.java
@@ -1,5 +1,6 @@
 package com.android.systemui.qs;
 
+import android.content.ContentResolver;
 import android.content.Context;
 import android.content.res.Configuration;
 import android.content.res.Resources;
@@ -15,6 +16,8 @@
 import com.android.systemui.qs.QSPanel.QSTileLayout;
 import com.android.systemui.qs.QSPanel.TileRecord;
 
+import cyanogenmod.providers.CMSettings;
+
 import java.util.ArrayList;
 
 public class PagedTileLayout extends ViewPager implements QSTileLayout {
@@ -281,11 +284,16 @@ public boolean updateResources() {
 
         private int getRows() {
             final Resources res = getContext().getResources();
-            if (res.getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
-                // Always have 3 rows in portrait.
-                return 3;
-            }
-            return Math.max(1, res.getInteger(R.integer.quick_settings_num_rows));
+            final ContentResolver resolver = mContext.getContentResolver();
+            final boolean isPortrait = res.getConfiguration().orientation
+                    == Configuration.ORIENTATION_PORTRAIT;
+            final int columnsPortrait = CMSettings.Secure.getInt(resolver,
+                    CMSettings.Secure.QS_ROWS_PORTRAIT, 3);
+            final int columnsLandscape = CMSettings.Secure.getInt(resolver,
+                    CMSettings.Secure.QS_ROWS_LANDSCAPE, res.getInteger(
+                    com.android.internal.R.integer.config_qs_num_rows_landscape_default));
+            final int columns = Math.max(1, isPortrait ? columnsPortrait : columnsLandscape);
+            return Math.max(1, isPortrait ? columnsPortrait : columnsLandscape);
         }
 
         public void setMaxRows(int maxRows) {
diff --git a/packages/SystemUI/src/com/android/systemui/qs/TileLayout.java b/packages/SystemUI/src/com/android/systemui/qs/TileLayout.java
index a5a1eaaf666..f72d17b8d64 100644
--- a/packages/SystemUI/src/com/android/systemui/qs/TileLayout.java
+++ b/packages/SystemUI/src/com/android/systemui/qs/TileLayout.java
@@ -1,6 +1,8 @@
 package com.android.systemui.qs;
 
+import android.content.ContentResolver;
 import android.content.Context;
+import android.content.res.Configuration;
 import android.content.res.Resources;
 import android.util.AttributeSet;
 import android.view.View;
@@ -10,6 +12,8 @@
 import com.android.systemui.qs.QSPanel.QSTileLayout;
 import com.android.systemui.qs.QSPanel.TileRecord;
 
+import cyanogenmod.providers.CMSettings;
+
 import java.util.ArrayList;
 
 public class TileLayout extends ViewGroup implements QSTileLayout {
@@ -74,7 +78,10 @@ public void removeAllViews() {
 
     public boolean updateResources() {
         final Resources res = mContext.getResources();
-        final int columns = Math.max(1, res.getInteger(R.integer.quick_settings_num_columns));
+        final ContentResolver resolver = mContext.getContentResolver();
+        final int columnsConfig = CMSettings.Secure.getInt(resolver,
+                CMSettings.Secure.QS_COLUMNS, 3);
+        final int columns = Math.max(1, columnsConfig);
         mCellHeight = mContext.getResources().getDimensionPixelSize(R.dimen.qs_tile_height);
         mCellMargin = res.getDimensionPixelSize(R.dimen.qs_tile_margin);
         mCellMarginTop = res.getDimensionPixelSize(R.dimen.qs_tile_margin_top);
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
index 4c8b67cea1f..6f87cfb4ea4 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
@@ -146,6 +146,7 @@
 import com.android.systemui.SystemUIFactory;
 import com.android.systemui.classifier.FalsingLog;
 import com.android.systemui.classifier.FalsingManager;
+import com.android.systemui.cm.UserContentObserver;
 import com.android.systemui.doze.DozeHost;
 import com.android.systemui.doze.DozeLog;
 import com.android.systemui.keyguard.KeyguardViewMediator;
@@ -215,6 +216,8 @@
 import com.android.systemui.tuner.TunerService;
 import com.android.systemui.volume.VolumeComponent;
 
+import cyanogenmod.providers.CMSettings;
+
 import java.io.FileDescriptor;
 import java.io.PrintWriter;
 import java.io.StringWriter;
@@ -481,6 +484,55 @@ public void run() {
         }
     };
 
+    class SettingsObserver extends UserContentObserver {
+        SettingsObserver(Handler handler) {
+            super(handler);
+        }
+
+        @Override
+        protected void observe() {
+            super.observe();
+
+            ContentResolver resolver = mContext.getContentResolver();
+            resolver.registerContentObserver(CMSettings.Secure.getUriFor(
+                    CMSettings.Secure.QS_ROWS_PORTRAIT),
+                    false, this, UserHandle.USER_ALL);
+            resolver.registerContentObserver(CMSettings.Secure.getUriFor(
+                    CMSettings.Secure.QS_ROWS_LANDSCAPE),
+                    false, this, UserHandle.USER_ALL);
+            resolver.registerContentObserver(CMSettings.Secure.getUriFor(
+                    CMSettings.Secure.QS_COLUMNS),
+                    false, this, UserHandle.USER_ALL);
+            update();
+        }
+
+        @Override
+        protected void unobserve() {
+            super.unobserve();
+            ContentResolver resolver = mContext.getContentResolver();
+            resolver.unregisterContentObserver(this);
+        }
+
+        @Override
+        public void onChange(boolean selfChange, Uri uri) {
+            if (uri.equals(CMSettings.Secure.getUriFor(
+                    CMSettings.Secure.QS_ROWS_PORTRAIT))
+                    || uri.equals(CMSettings.Secure.getUriFor(
+                    CMSettings.Secure.QS_ROWS_LANDSCAPE))) {
+                    updateResources();
+            } else if (uri.equals(CMSettings.Secure.getUriFor(
+                    CMSettings.Secure.QS_COLUMNS))) {
+                    updateResources();
+            }
+            update();
+        }
+
+        @Override
+        public void update() {
+            ContentResolver resolver = mContext.getContentResolver();
+        }
+    }
+
     class DevForceNavbarObserver extends ContentObserver {
         DevForceNavbarObserver(Handler handler) {
             super(handler);
@@ -830,6 +882,9 @@ public void start() {
                 LOCKSCREEN_MEDIA_METADATA,
                 SYSTEMUI_BURNIN_PROTECTION);
 
+        SettingsObserver observer = new SettingsObserver(mHandler);
+        observer.observe();
+
         // Lastly, call to the icon policy to install/update all the icons.
         mIconPolicy = new PhoneStatusBarPolicy(mContext, mIconController, mCastController,
                 mHotspotController, mUserInfoController, mBluetoothController,
@@ -5169,6 +5224,13 @@ public void run() {
         }
     }
 
+    public void UpdateSomeViews() {
+        onDensityOrFontScaleChanged();
+        updateNotifications();
+        updateRowStates();
+        updateSpeedbump();
+    }
+
     public void onStartedWakingUp() {
         mDeviceInteractive = true;
         mStackScroller.setAnimationsEnabled(true);
diff --git a/packages/SystemUI/src/com/android/systemui/cm/UserContentObserver.java b/packages/SystemUI/src/com/android/systemui/cm/UserContentObserver.java
new file mode 100644
index 00000000000..0c4b19ba407
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/cm/UserContentObserver.java
@@ -0,0 +1,89 @@
+/*
+ * Copyright (C) 2014 The CyanogenMod Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License
+ */
+package com.android.systemui.cm;
+
+import android.app.ActivityManagerNative;
+import android.app.IUserSwitchObserver;
+import android.database.ContentObserver;
+import android.net.Uri;
+import android.os.Handler;
+import android.os.IRemoteCallback;
+import android.os.RemoteException;
+import android.util.Log;
+
+/**
+ * Simple extension of ContentObserver that also listens for user switch events to call update
+ */
+public abstract class UserContentObserver extends ContentObserver {
+    private static final String TAG = "UserContentObserver";
+
+    private Runnable mUpdateRunnable;
+
+    private IUserSwitchObserver mUserSwitchObserver = new IUserSwitchObserver.Stub() {
+        @Override
+        public void onUserSwitching(int newUserId, IRemoteCallback reply) {
+        }
+        @Override
+        public void onUserSwitchComplete(int newUserId) throws RemoteException {
+            mHandler.post(mUpdateRunnable);
+        }
+        @Override
+        public void onForegroundProfileSwitch(int newProfileId) {
+        }
+    };
+
+    private Handler mHandler;
+
+    public UserContentObserver(Handler handler) {
+        super(handler);
+        mHandler = handler;
+        mUpdateRunnable = new Runnable() {
+            @Override
+            public void run() {
+                update();
+            }
+        };
+    }
+
+    protected void observe() {
+        try {
+            ActivityManagerNative.getDefault().registerUserSwitchObserver(mUserSwitchObserver, TAG);
+        } catch (RemoteException e) {
+            Log.w(TAG, "Unable to register user switch observer!", e);
+        }
+    }
+
+    protected void unobserve() {
+        try {
+            mHandler.removeCallbacks(mUpdateRunnable);
+            ActivityManagerNative.getDefault().unregisterUserSwitchObserver(mUserSwitchObserver);
+        } catch (RemoteException e) {
+            Log.w(TAG, "Unable to unregister user switch observer!", e);
+        }
+    }
+
+    protected abstract void update();
+
+    @Override
+    public void onChange(boolean selfChange) {
+        update();
+    }
+
+    @Override
+    public void onChange(boolean selfChange, Uri uri) {
+        update();
+    }
+}
