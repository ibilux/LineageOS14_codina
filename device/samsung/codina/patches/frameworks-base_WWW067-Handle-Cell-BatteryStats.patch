Subject: [PATCH] Handle Cell STATE_EMERGENCY_ONLY in BatteryStats

The EMERGENCY_ONLY state implies that a device has
camped on a network for emergency, which also means
that it has concluded that there are no available
subscribed networks. In this state, scans will occur
more frequently than when a device is registered for
service; however, the device will not continuously
scan for service, and thus the power profile will be
more akin to IN_SERVICE than OUT_OF_SERVICE.

diff --git a/core/java/com/android/internal/os/BatteryStatsImpl.java b/core/java/com/android/internal/os/BatteryStatsImpl.java
index f28315b..bb3bc16 100644
--- a/core/java/com/android/internal/os/BatteryStatsImpl.java
+++ b/core/java/com/android/internal/os/BatteryStatsImpl.java
@@ -4010,19 +4010,6 @@
         }
     }
 
-    private int fixPhoneServiceState(int state, int signalBin) {
-        if (mPhoneSimStateRaw == TelephonyManager.SIM_STATE_ABSENT) {
-            // In this case we will always be STATE_OUT_OF_SERVICE, so need
-            // to infer that we are scanning from other data.
-            if (state == ServiceState.STATE_OUT_OF_SERVICE
-                    && signalBin > SignalStrength.SIGNAL_STRENGTH_NONE_OR_UNKNOWN) {
-                state = ServiceState.STATE_IN_SERVICE;
-            }
-        }
-
-        return state;
-    }
-
     private void updateAllPhoneStateLocked(int state, int simState, int strengthBin) {
         boolean scanning = false;
         boolean newHistory = false;
@@ -4034,22 +4021,24 @@
         final long elapsedRealtime = mClocks.elapsedRealtime();
         final long uptime = mClocks.uptimeMillis();
 
-        if (simState == TelephonyManager.SIM_STATE_ABSENT) {
-            // In this case we will always be STATE_OUT_OF_SERVICE, so need
-            // to infer that we are scanning from other data.
-            if (state == ServiceState.STATE_OUT_OF_SERVICE
-                    && strengthBin > SignalStrength.SIGNAL_STRENGTH_NONE_OR_UNKNOWN) {
-                state = ServiceState.STATE_IN_SERVICE;
-            }
+        // Unless the SIM is in STATE_READY, the device will not register, so it's
+        // approximately equivalent to having no SIM at all: we should either be
+        // OUT_OF_SERVICE or in EMERGENGY_ONLY, but if we have a signal, then we
+        // are camped.
+        if (simState != TelephonyManager.SIM_STATE_READY
+                && strengthBin > SignalStrength.SIGNAL_STRENGTH_NONE_OR_UNKNOWN) {
+            state = ServiceState.STATE_IN_SERVICE;
         }
 
         // If the phone is powered off, stop all timers.
         if (state == ServiceState.STATE_POWER_OFF) {
             strengthBin = -1;
 
-        // If we are in service, make sure the correct signal string timer is running.
-        } else if (state == ServiceState.STATE_IN_SERVICE) {
-            // Bin will be changed below.
+        // If we are in emergency service, then we are camped on a cell. Scans will
+        // happen more frequently than in other modes, but the power profile should
+        // be much closer to IN_SERVICE than OUT_OF_SERVICE.
+        } else if (state == ServiceState.STATE_EMERGENCY_ONLY) {
+            state = ServiceState.STATE_IN_SERVICE;
 
         // If we're out of service, we are in the lowest signal strength
         // bin and have the scanning bit set.
@@ -4063,6 +4052,10 @@
                         + Integer.toHexString(mHistoryCur.states));
                 mPhoneSignalScanningTimer.startRunningLocked(elapsedRealtime);
             }
+        } else if (state == ServiceState.STATE_IN_SERVICE) {
+            // Bin will be changed below.
+        } else {
+            Slog.d(TAG, "Unexpected ServiceState: " + state);
         }
 
         if (!scanning) {
@@ -11286,7 +11279,7 @@
         mMobileRadioPowerState = DataConnectionRealTimeInfo.DC_POWER_STATE_LOW;
         mMobileRadioActiveTimer = new StopwatchTimer(mClocks, null, -400, null,
                 mOnBatteryTimeBase, in);
-        mMobileRadioActivePerAppTimer = new StopwatchTimer(mClocks, null, -401, null, 
+        mMobileRadioActivePerAppTimer = new StopwatchTimer(mClocks, null, -401, null,
                 mOnBatteryTimeBase, in);
         mMobileRadioActiveAdjustedTime = new LongSamplingCounter(mOnBatteryTimeBase, in);
         mMobileRadioActiveUnknownTime = new LongSamplingCounter(mOnBatteryTimeBase, in);
