Hack: fix wifi autoconnection [1/3] 

diff --git a/include/utils/SystemClock.h b/include/utils/SystemClock.h
index 01d6de7..ccbe0b0 100644
--- a/include/utils/SystemClock.h
+++ b/include/utils/SystemClock.h
@@ -24,7 +24,9 @@ namespace android {
 
 int64_t uptimeMillis();
 int64_t elapsedRealtime();
+int64_t elapsedRealtime1();
 int64_t elapsedRealtimeNano();
+int64_t elapsedRealtimeNano1();
 
 }; // namespace android
 
diff --git a/libutils/Android.mk b/libutils/Android.mk
index 02d6de7..ccbe0b0 100644
--- a/libutils/Android.mk
+++ b/libutils/Android.mk
@@ -43,7 +43,7 @@ ifeq ($(BOARD_USES_STE_HARDWARE),true)
 endif
 
 
-host_commonCflags := -DLIBUTILS_NATIVE=1 $(TOOL_CFLAGS) -Werror
+host_commonCflags := -DLIBUTILS_NATIVE=1 $(TOOL_CFLAGS)
 
 # For the host
 # =====================================================
@@ -78,7 +78,7 @@ LOCAL_SRC_FILES:= \
 ifeq ($(TARGET_ARCH),mips)
 LOCAL_CFLAGS += -DALIGN_DOUBLE
 endif
-LOCAL_CFLAGS += -Werror -fvisibility=protected
+LOCAL_CFLAGS += -fvisibility=protected
 
 LOCAL_STATIC_LIBRARIES := \
 	libcutils \
@@ -105,7 +105,7 @@ LOCAL_SHARED_LIBRARIES := \
         libcutils \
         libdl \
         liblog
-LOCAL_CFLAGS := -Werror
+LOCAL_CFLAGS :=
 LOCAL_C_INCLUDES += external/safe-iop/include
 
 LOCAL_CLANG := true
diff --git a/libutils/SystemClock.cpp b/libutils/SystemClock.cpp
index 03d6de7..ccbe0b0 100644
--- a/libutils/SystemClock.cpp
+++ b/libutils/SystemClock.cpp
@@ -42,6 +42,8 @@ namespace android {
 static pthread_mutex_t clock_lock = PTHREAD_MUTEX_INITIALIZER;
 static int clock_method = -1;
 
+static int debug_time = 0;
+
 /*
  * native public static long uptimeMillis();
  */
@@ -59,6 +61,14 @@ int64_t elapsedRealtime()
 	return nanoseconds_to_milliseconds(elapsedRealtimeNano());
 }
 
+/*
+ * native public static long elapsedRealtime1();
+ */
+int64_t elapsedRealtime1()
+{
+	return nanoseconds_to_milliseconds(elapsedRealtimeNano1());
+}
+
 #define METHOD_CLOCK_GETTIME    0
 #define METHOD_IOCTL            1
 #define METHOD_SYSTEMTIME       2
@@ -180,4 +190,36 @@ int64_t elapsedRealtimeNano()
 #endif
 }
 
+
+/*
+ * native public static long elapsedRealtimeNano1();
+ */
+int64_t elapsedRealtimeNano1()
+{
+    struct timespec ts;
+    int result;
+    int64_t timestamp;
+#if DEBUG_TIMESTAMP
+    static volatile int64_t prevTimestamp;
+    static volatile int prevMethod;
+#endif
+
+    static int s_fd = -1;
+
+    //pthread_mutex_lock(&clock_lock);
+
+    // /dev/alarm doesn't exist, fallback to CLOCK_BOOTTIME
+    result = clock_gettime(CLOCK_BOOTTIME, &ts);
+    if (result == 0) {
+        timestamp = seconds_to_nanoseconds(ts.tv_sec) + ts.tv_nsec;
+        checkTimeStamps(timestamp, &prevTimestamp, &prevMethod,
+                        METHOD_CLOCK_GETTIME);
+	if (debug_time)
+	        ALOGI("elapsedRealtimeNano: using METHOD_CLOCK_GETTIME");
+    }
+    //pthread_mutex_unlock(&clock_lock);
+
+    return timestamp;
+}
+
 }; // namespace android
